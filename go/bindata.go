// Code generated by go-bindata.
// sources:
// res/standalone.html
// DO NOT EDIT!

package easyLexML

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resStandaloneHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x56\x4b\x73\xdb\x36\x10\x3e\x33\xbf\x62\x2b\x8f\x1b\x7b\x4a\x4a\x94\x63\x27\x19\x48\x72\x1f\x69\x7b\xca\x4c\x7b\x70\x0f\x3d\x2e\xc9\x95\x80\x31\x08\x70\x80\xa5\x1e\xd1\xf8\xbf\x67\x40\x52\x16\x29\xcb\xce\x89\xe0\xbe\xbe\xc5\xbe\xb0\xf3\x9f\xfe\xfc\xe7\xcb\xc3\xff\xff\xfe\x05\x92\x4b\x7d\xff\x6e\xde\x7e\xa2\xb9\x24\x2c\xee\xdf\x45\xd1\xbc\x24\x46\xc8\x25\x3a\x4f\xbc\x18\xfd\xf7\xf0\x77\xf2\x79\x74\x64\x18\x2c\x69\x31\x5a\x2b\xda\x54\xd6\xf1\x08\x72\x6b\x98\x0c\x2f\x46\x1b\x55\xb0\x5c\x14\xb4\x56\x39\x25\xcd\x4f\x0c\xca\x28\x56\xa8\x13\x9f\xa3\xa6\xc5\xb4\x35\xc3\x8a\x35\xdd\xef\xf7\xe3\x87\x70\x78\x7a\x9a\x4f\x5a\x4a\xe0\x79\xde\xb5\xa7\xe8\x37\x55\x06\x00\xa8\x9d\xbe\x7a\x2f\x99\x2b\x2f\x26\x93\xa5\x35\xec\xc7\x2b\x6b\x57\x9a\xb0\x52\x7e\x9c\xdb\x72\x92\x7b\xff\xeb\x12\x4b\xa5\x77\x8b\xaf\x2a\x73\xf4\xcb\x1f\xe8\x1f\xc9\xad\x95\xd6\x24\x6e\xd3\x34\xbe\x4d\x53\x15\x7f\x4a\xd3\x9f\x7d\x9d\x85\x3b\x69\x64\x65\x12\xda\xf2\xfb\xeb\x59\x80\xca\x6c\xb1\x83\x7d\x38\x45\x01\x20\xf1\xea\x1b\x09\x98\x7e\xae\xb6\x0d\x3b\x2a\xd1\xad\x94\x49\xd8\x56\x02\x6e\x1c\x95\xb3\xa3\x68\x8b\x2b\x60\xd4\x20\x43\x0f\x79\x14\x83\x47\xe3\x13\x4f\x4e\x2d\x7b\x1a\x6b\x74\x0a\x0d\x27\xa6\x2e\xc9\xa9\x5c\x00\x63\x56\x6b\x74\x81\xe0\x5b\x39\xa6\x2d\x27\xa8\xd5\xca\x08\xd0\xb4\xe4\x1e\xd5\x91\x29\xc8\x29\xb3\x12\x60\x2b\x56\xa5\xfa\x46\x5f\x69\xa5\x32\xa5\x15\xef\x5a\x39\xb9\xab\x24\x19\x2f\x00\x6b\xb6\x2d\x49\x2b\x43\x89\x24\xb5\x92\x2c\xe0\x26\x4d\x2f\x1b\xf2\x53\x13\xe6\x92\x0a\x85\xe0\x73\x47\x64\x00\x4d\x01\x57\xa5\x32\x6d\xfe\x04\x7c\xf8\xe8\xa8\xbc\xee\x62\xd3\x0b\x53\xd4\xe7\xb7\x18\x87\x28\x05\x87\x05\xe4\xa8\xf3\xab\xbb\xf4\x12\x92\x56\x06\x26\x70\xd3\x06\xbb\x85\x7d\x15\x1b\xb7\x3f\xc4\xee\xe7\xe8\xf6\x90\xa3\xa3\x55\x4f\x39\x2b\x6b\x2e\xd8\xe6\x50\xeb\x4e\x49\x2b\xcf\x49\x53\x5c\x09\xef\x2a\x12\x60\xac\xa1\xd9\x59\x9d\xfb\xa3\x56\x85\x45\xd1\xc4\x3a\x3d\x8a\xca\x69\x0c\xf2\x26\x06\xf9\x21\x06\x79\x1b\x83\xbc\x8b\x41\x7e\xec\x14\xfa\x99\xcb\xc9\x30\xb9\xa3\x22\x8e\x35\x66\xa4\x63\xe8\x0e\x62\xad\xbc\x62\x2a\x3a\xd5\xdc\x6a\xeb\x04\x5c\xa4\x69\xda\xcb\x77\x41\xb9\x75\x18\x7c\x7b\xdb\xe5\xce\xe6\xd0\xef\x24\xb3\xcc\xb6\x1c\xb8\xdf\xa9\x05\x95\x4e\xb8\x5f\xdd\xd3\xe7\x74\xbe\x72\x93\xa8\x50\xbe\xd2\xb8\x13\x90\x69\x9b\x3f\xf6\xea\x7a\xd3\x95\x57\x66\x75\x31\x1b\x78\x71\xd2\x37\xa7\xce\x3d\x63\xbe\xf0\xef\x1e\x7c\x85\xa6\x73\xf3\x1c\x70\xdf\xf5\x24\x1d\xdf\x3d\x63\x74\x8c\x03\x44\x9f\xf7\x0a\x8a\x30\x2c\x93\x5c\x2a\x5d\x5c\x4d\xaf\x07\xc3\x20\x14\x8d\x00\xc5\xa8\x55\x7e\xe6\xbe\xc6\xba\x12\xf5\x9b\xa6\x35\x7a\x6e\x6d\xf7\x0d\xbf\x0c\x58\x1f\xef\xd4\x6c\x35\xc8\xd6\xb9\x94\x8e\x7d\x9d\x05\xc4\xde\xdf\xb0\x1a\xda\xce\x9c\x9e\x0f\xc5\xd8\x58\xa6\x46\x01\x00\x20\xb3\xae\x20\x27\x60\x5a\x6d\xc1\x5b\xad\x0a\xb8\x40\xc4\xd9\x80\x9b\x38\x2c\x54\xed\x05\x1c\x83\x1b\x98\xc7\x9e\xa9\xb6\x30\x4d\xbb\xfe\x7c\x01\x15\xc3\x00\xb8\x5f\xbf\xc1\xca\xa1\x1b\x3a\xd4\xae\xf5\xdc\x9b\x25\x7b\x92\xf4\x61\x5d\x09\x46\xb7\x22\xee\x0c\xa0\x51\x65\xd3\x55\x49\x78\xce\x04\x48\xb5\x92\x3a\xa4\x63\x76\xc2\x2e\xea\x43\xf7\xdd\xf8\xde\xd0\x7c\xa4\xdd\xd2\x61\x49\xfe\xa8\xd9\x59\x4e\x2f\x61\x9f\x61\xfe\xb8\x72\xb6\x36\x45\x72\xb8\xc7\x72\x89\xb3\x46\x35\xfa\x74\xf7\x23\x89\x69\x7a\xde\x08\x3b\x34\xbe\x42\x47\x86\x67\xc7\x71\x87\x31\xe0\xc9\x28\x79\x7d\x72\x44\x1b\xeb\x8a\x24\x73\x84\x8f\x02\x9a\x4f\x82\xba\xad\xb2\xc8\xae\xc9\x2d\xb5\xdd\x24\x1b\x87\xd5\x81\x1b\xe4\x67\xfd\xf9\x94\xe9\xba\x37\x84\x50\xc8\xa0\x16\x5c\xc0\x9c\xd5\x9a\x5e\xf3\xa0\x0e\xcf\x56\x78\x86\x9e\x75\xe7\x93\xc3\x5b\x3f\x9f\x74\xab\xc7\x3c\x4c\xf9\x66\x0d\x08\x04\x72\xa0\x8a\xc5\xa8\x3d\x36\x9b\x43\x34\x97\xd3\xc1\xde\x20\xa7\x8d\xf4\xa4\x95\x69\x17\x88\xae\xfd\x82\x6a\xd8\x57\x0a\x64\x6c\xd7\x8e\x49\xc7\x7a\x21\x86\x99\x67\x87\x39\x0f\x30\x7e\xef\x88\x27\x58\x51\x8f\xf5\xf4\x74\x6a\x36\xf8\x66\xf3\x86\xbe\xdf\x8f\xbf\x58\x57\xd5\x3e\xfc\xcd\x27\xed\xcd\xe6\x93\x66\xd9\xfa\x1e\x00\x00\xff\xff\xd0\x7e\x44\xb7\x83\x09\x00\x00")

func resStandaloneHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resStandaloneHtml,
		"res/standalone.html",
	)
}

func resStandaloneHtml() (*asset, error) {
	bytes, err := resStandaloneHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/standalone.html", size: 2435, mode: os.FileMode(420), modTime: time.Unix(1554312154, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"res/standalone.html": resStandaloneHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"res": &bintree{nil, map[string]*bintree{
		"standalone.html": &bintree{resStandaloneHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
