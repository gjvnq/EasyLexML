// Code generated by go-bindata.
// sources:
// res/standalone.html
// DO NOT EDIT!

package easyLexML

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resStandaloneHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x56\x4d\x73\xdb\x36\x13\x3e\x2b\xbf\x62\x5f\x65\xf2\xc6\x99\x8a\x22\xe9\xd8\x49\x06\xa2\xd4\x8f\xb4\x3d\x65\xa6\x3d\xa4\x87\x1e\x97\xe0\x4a\x40\x0c\x02\x1c\x60\x29\x4b\xf1\xf8\xbf\x77\x40\x52\x16\x25\x2b\xc9\x89\x04\x76\xf7\x79\x16\xfb\x05\x14\xff\xfb\xfd\xaf\x8f\x9f\xff\xfd\xfb\x0f\x50\x5c\x9b\xd5\x8b\xa2\xff\x4c\x0a\x45\x58\xad\x5e\x4c\x26\x45\x4d\x8c\x20\x15\xfa\x40\xbc\x9c\xfe\xf3\xf9\xcf\xe4\xc3\xf4\x28\xb0\x58\xd3\x72\xba\xd5\x74\xdf\x38\xcf\x53\x90\xce\x32\x59\x5e\x4e\xef\x75\xc5\x6a\x59\xd1\x56\x4b\x4a\xba\xc5\x0c\xb4\xd5\xac\xd1\x24\x41\xa2\xa1\x65\xde\xc3\xb0\x66\x43\xab\x87\x87\xf9\xe7\xf8\xf3\xf8\x58\xa4\xfd\x4e\x94\x05\xe9\x75\xc3\x10\xbc\x5c\x4e\x15\x73\x13\x44\x9a\xca\xca\x7e\x09\x73\x69\x5c\x5b\xad\x0d\x7a\x9a\x4b\x57\xa7\xf8\x05\x77\xa9\xd1\x65\x48\x6b\x64\x15\x17\xd7\xf3\xf7\xf3\xdb\xd4\x20\x53\xe0\xf9\x97\x30\x05\x0c\x7b\x2b\x97\xd3\x7c\xba\x2a\xd2\x1e\x77\xd5\x73\xf0\xbe\x67\x9b\xfc\xa2\xeb\x78\x08\x68\xbd\xb9\x7a\x7d\xa0\x5b\x3b\xcb\x61\xbe\x71\x6e\x63\x08\x1b\x1d\x3a\x3a\x19\xc2\xcf\x6b\xac\xb5\xd9\x2f\x3f\xe9\xd2\xd3\x4f\xbf\x61\xb8\x23\xbf\xd5\xc6\x90\xb8\xc9\xb2\xd9\x4d\x96\xe9\xd9\xfb\x2c\xfb\x7f\x68\xcb\x18\x37\x83\xac\x6d\x42\x3b\x7e\xfd\x66\x11\xa9\x4a\x57\xed\xe1\x21\xfe\x4d\x22\x41\x12\xf4\x57\x12\x90\x7f\x68\x76\x9d\x78\x52\xa3\xdf\x68\x9b\xb0\x6b\x04\x5c\x7b\xaa\x17\x47\xd5\x9e\x57\xc0\xb4\x63\x86\x11\xf3\x74\x06\x01\x6d\x48\x02\x79\xbd\x1e\x59\x6c\xd1\x6b\xb4\x9c\xd8\xb6\x26\xaf\xa5\x00\xc6\xb2\x35\xe8\xe3\x46\xe8\xf5\x98\x76\x9c\xa0\xd1\x1b\x2b\xc0\xd0\x9a\x47\xbb\x9e\x6c\x45\x5e\xdb\x8d\x00\xd7\xb0\xae\xf5\x57\xfa\x44\x1b\x5d\x6a\xa3\x79\xdf\xeb\xa9\x7d\xa3\xc8\x06\x01\xd8\xb2\xeb\xb7\x8c\xb6\x94\x28\xd2\x1b\xc5\x02\xae\xb3\xec\x55\xb7\xfd\xd8\x85\xb9\xa6\x4a\x23\x04\xe9\x89\x2c\xa0\xad\xe0\xaa\xd6\xb6\xaf\x11\x01\x6f\xdf\x79\xaa\xdf\x0c\xb1\x19\x85\x69\x32\x96\xf7\x1c\x87\x28\x45\x87\x05\x48\x34\xf2\xea\x36\x7b\x05\x49\xaf\x03\x29\x5c\xf7\xc1\xee\x69\xbf\xc9\x8d\xbb\x1f\x72\x8f\x73\x74\x73\xc8\xd1\x11\x35\x90\x64\xed\xec\x4b\x76\x12\x5a\x33\x18\x19\x1d\x38\xe9\x8a\x2b\xe1\x7d\x43\x02\xac\xb3\xb4\xb8\x68\xb3\x3a\x5a\x35\x58\x55\x5d\xac\xb3\xa3\xaa\xca\x67\xa0\xae\x67\xa0\xde\xce\x40\xdd\xcc\x40\xdd\xce\x40\xbd\x1b\x0c\xc6\x99\x93\x64\x99\xfc\xd1\x10\xe7\x06\x4b\x32\x33\x18\x7e\xc4\x56\x07\xcd\x54\x0d\xa6\xd2\x19\xe7\x05\xbc\xcc\xb2\x6c\x94\xef\x8a\xa4\xf3\x18\x7d\xfb\xbe\xcb\x03\xe6\xa9\xdf\x49\xe9\x98\x5d\x7d\xe2\xfe\x60\x16\x4d\x06\xe5\x71\x75\xe7\x4f\xe9\xfc\xc6\x49\x26\x95\x0e\x8d\xc1\xbd\x80\xd2\x38\x79\x37\xaa\xeb\xfb\xa1\xbc\x4a\x67\xaa\xc5\x89\x17\x67\x7d\x73\xee\xdc\x13\xe7\x33\xff\x56\x10\x1a\xb4\x83\x9b\x97\x88\xc7\xae\x27\xd9\xfc\xf6\x89\x63\x10\x1c\x28\xc6\xb2\x6f\xb0\x08\xcb\x2a\x91\x4a\x9b\xea\x2a\x7f\x73\x32\x0c\x62\xd1\x08\xd0\x8c\x46\xcb\x0b\xe7\xb5\xce\xd7\x68\xbe\x0b\x6d\x30\x70\x8f\x3d\x06\x7e\x1e\xb0\x31\xdf\x39\x6c\x73\x92\xad\x4b\x29\x9d\x87\xb6\x8c\x8c\xa3\xd5\x69\x35\xf4\x9d\x99\x5f\x0e\xc5\xdc\x3a\xa6\xce\x00\x00\xa0\x74\xbe\x22\x2f\x20\x6f\x76\x10\x9c\xd1\x15\xbc\x44\xc4\xc5\x89\x34\xf1\x58\xe9\x36\x08\x38\x06\x37\x0a\x8f\x3d\xd3\xec\x20\xcf\x86\xfe\x7c\x46\x35\x83\x13\xe2\x71\xfd\x46\x94\x43\x37\x0c\xac\x17\x5c\xc5\x67\xba\x59\x36\xd2\x55\xfe\xbb\xe5\x7d\x56\x20\xa7\x35\x28\x18\xfd\x86\x78\x00\x40\xab\xeb\xae\x03\x93\x78\xbd\x0a\x50\x7a\xa3\x4c\x4c\xdd\xe2\x4c\x5c\xb5\x87\x4e\xbd\x0e\xa3\x01\x7b\x47\xfb\xb5\xc7\x9a\xc2\xd1\x72\x40\xce\x5e\xc1\x43\x89\xf2\x6e\xe3\x5d\x6b\xab\xe4\x70\x8e\xf5\x1a\x17\x9d\xe9\xe4\xfd\xed\x8f\x34\xf2\xec\x32\x08\x7b\xb4\xa1\x41\x4f\x96\x17\xc7\xd1\x88\x33\xc0\xb3\xb1\xe3\xb6\xe4\xd7\xc6\xdd\x27\xf7\x1e\x1b\x01\xa5\x27\xbc\x4b\xee\x9d\x1f\x4a\x72\x80\x2b\x4d\x3b\x1a\x3d\x28\x54\x34\x8b\x60\x28\x59\x6f\x69\x3c\xfd\xc6\x13\xab\x8d\x97\x55\xbc\x7c\x9e\x6c\x8b\xf4\x70\xc3\x17\xe9\xf0\xa8\x29\xe2\x6c\xef\x2e\xff\xb8\x41\x1e\x74\xb5\x9c\xf6\xbf\xdd\x9b\x64\x52\xa8\xfc\xe4\x45\xa2\xf2\x4e\x3b\xed\x75\xfa\x67\xc3\xd0\x74\xd1\x34\xbe\x84\x2a\x64\xec\x1f\x34\xe9\x20\x7a\xa6\x86\x65\x60\x8f\x92\x4f\x38\x7e\x1d\x36\xcf\xb8\x26\x23\xd1\xe3\xe3\x39\x6c\xf4\xcd\xc9\x6e\xff\xe1\x61\xfe\xd1\xf9\xa6\x0d\x71\x55\xa4\xfd\xc9\x8a\xb4\x7f\xc6\xfd\x17\x00\x00\xff\xff\xe0\x3f\xee\x53\xde\x09\x00\x00")

func resStandaloneHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resStandaloneHtml,
		"res/standalone.html",
	)
}

func resStandaloneHtml() (*asset, error) {
	bytes, err := resStandaloneHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/standalone.html", size: 2526, mode: os.FileMode(420), modTime: time.Unix(1554925284, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"res/standalone.html": resStandaloneHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"res": &bintree{nil, map[string]*bintree{
		"standalone.html": &bintree{resStandaloneHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
