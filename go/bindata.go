// Code generated by go-bindata.
// sources:
// res/standalone.html
// DO NOT EDIT!

package easyLexML

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resStandaloneHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x56\x5f\x6f\xdb\x36\x10\x7f\x76\x3f\x05\xe7\xa2\x6b\x8b\x59\x96\xe4\x26\x6d\x21\xdb\xe9\xb6\xee\xcf\x4b\x8b\x0d\x58\x36\x60\x4f\xc3\x49\x3c\x5b\xd7\x50\xa4\x40\x52\x8e\xdd\x20\xdf\x7d\xa0\x48\x45\x92\xed\xa4\x4f\x12\xef\xdf\xef\xee\x78\x77\xbc\xd5\x77\xbf\xfc\xf1\xf1\xfa\xdf\x3f\x7f\x65\xa5\xad\xc4\xd5\xb3\x95\xff\x4c\x56\x25\x02\xbf\x7a\x36\x99\xac\x2a\xb4\xc0\x8a\x12\xb4\x41\xbb\x9e\xfe\x7d\xfd\x5b\xf4\x7e\xda\x33\x24\x54\xb8\x9e\xee\x08\x6f\x6b\xa5\xed\x94\x15\x4a\x5a\x94\x76\x3d\xbd\x25\x6e\xcb\x35\xc7\x1d\x15\x18\xb5\x87\x19\x23\x49\x96\x40\x44\xa6\x00\x81\xeb\xd4\x9b\xb1\x64\x05\x5e\xdd\xdd\xcd\xaf\xdd\xcf\xfd\xfd\x2a\xf6\x14\xc7\x33\x85\xa6\xda\x32\xa3\x8b\xf5\xb4\xb4\xb6\x36\x59\x1c\x17\x5c\x7e\x31\xf3\x42\xa8\x86\x6f\x04\x68\x9c\x17\xaa\x8a\xe1\x0b\xec\x63\x41\xb9\x89\x2b\xb0\xa5\x3b\x2c\xe6\xef\xe6\x97\xb1\x00\x8b\xc6\xce\xbf\x98\x0f\x85\x92\x1b\xda\xae\x3f\x7f\xfe\xf4\xdf\x5f\xff\xfc\x3e\x65\x60\x0e\xb2\x58\x4f\xd3\xe9\xd5\x2a\xf6\x30\x1e\xd1\x1e\x3c\xf6\xe4\x47\xaa\x5c\x48\xac\xd1\xe2\xd5\xcb\x0e\x7c\xa3\xa4\x35\xf3\xad\x52\x5b\x81\x50\x93\x69\xc1\x0b\x63\x3e\x6c\xa0\x22\x71\x58\x7f\xa2\x5c\xe3\x0f\x3f\x83\xb9\x41\xbd\x23\x21\x30\xbb\x48\x92\xd9\x45\x92\xd0\xec\x5d\x92\x7c\x6f\x9a\xdc\x65\x51\x80\x25\x19\xe1\xde\xbe\x7c\xbd\x74\x50\xb9\xe2\x07\x76\xe7\xfe\x26\x0e\x20\x32\xf4\x15\x33\x96\xbe\xaf\xf7\x2d\x7b\x52\x81\xde\x92\x8c\xac\xaa\x33\xb6\xd0\x58\x2d\x7b\x51\x8f\x9b\xb1\x69\x8b\xcc\x06\xc8\xd3\x19\x33\x20\x4d\x64\x50\xd3\x66\xa0\xb1\x03\x4d\x20\x6d\x24\x9b\x0a\x35\x15\x19\xb3\x90\x37\x02\xb4\x23\x18\x2f\x67\x71\x6f\x23\x10\xb4\x95\x19\x13\xb8\xb1\x03\xaa\x46\xc9\x51\x93\xdc\x66\x4c\xd5\x96\x2a\xfa\x8a\x9f\x70\x4b\x39\x09\xb2\x07\x2f\x57\x1e\xea\x12\xa5\xc9\x18\x34\x56\x79\x92\x20\x89\x51\x89\xb4\x2d\x6d\xc6\x16\x49\xf2\xa2\x25\xdf\xb7\x69\xae\x90\x13\x30\x53\x68\x44\xc9\x40\x72\xf6\xaa\x22\xe9\x2b\x26\x63\x6f\xde\x6a\xac\x5e\x87\xdc\x0c\xd2\x34\x19\xf2\x3d\x46\x97\x25\xe7\x70\xc6\x16\x97\x3d\xa3\x06\xce\x49\x6e\x3b\xce\x29\x43\x7b\xc7\xd2\x07\x4e\xeb\xd9\x44\xc2\xee\xb9\x21\x8e\x39\xe8\x0e\xb6\x8b\x21\x4d\x92\x5d\xb9\x1c\xb9\xb2\xb8\x18\x18\x56\x86\x2c\x29\x99\xb1\x0d\xed\x91\x2f\x99\x27\x7f\x8d\x48\x72\xdc\x67\x2c\x0d\x72\xed\x8d\x26\xe1\xe0\xdd\xeb\x4e\x6a\x87\x7a\x23\xd4\x6d\xe6\x52\xa3\x84\x38\x17\x64\x7a\x1c\x7b\x17\xc8\x03\x3d\x57\x9a\xa3\x7e\xa0\xd7\x7b\x66\x94\x20\xce\x9e\x27\x49\xf2\x58\xa8\xd0\x05\x1b\xd2\xf3\xe0\xd3\xa9\x68\x23\x3a\xd9\xd1\x0d\xa7\x8b\xcb\x17\x67\x73\xdf\x66\x98\xf5\xc6\x1e\xad\x00\xd8\x7f\xb3\x02\x86\x9d\x72\xd1\x75\x4a\x6f\xd5\x60\xe1\x6e\xe0\xb9\x55\x45\xef\xa6\x20\x63\xa3\xb6\xc5\x23\x7b\xa8\x31\x63\x52\x49\x5c\x9e\xd5\xb9\xea\xb5\x8e\xf2\xd0\x8a\x96\xe9\x8c\x95\x8b\x19\x2b\xdf\xcc\x58\x79\x31\x63\xe5\xe5\x8c\x95\x6f\x83\xc2\xb0\x7f\x0a\x94\x16\x75\xaf\x08\x73\x01\x39\x8a\x19\x0b\x3f\xd9\x8e\x0c\x59\xe4\x41\xb5\x50\x42\xe9\x6c\x70\x3f\xad\x2d\x8e\x85\xd2\xe0\x2b\xea\x29\x97\x83\xcd\xb1\xdf\x51\xae\xac\x55\xd5\xc8\xfd\xa0\xe6\x54\x82\xf0\x70\xc6\xf4\x8d\xf0\x48\x24\x13\x4e\xa6\x16\x70\xc8\x58\x2e\x54\x71\x33\x98\x2e\xb7\xa1\x04\x72\x25\xf8\x72\xe4\xc5\xd1\xf4\x3a\x76\xee\x01\xf3\xc4\xbf\x2b\x66\x6a\x90\xc1\xcd\x73\xc0\x43\xd7\xa3\x64\xde\x77\x7e\x60\x74\x10\x43\xde\x23\x28\x99\xb4\x65\x54\x94\x24\xf8\xab\xf4\xf5\x68\x24\xbb\xa2\xc9\x18\x59\x10\x54\x9c\x89\x57\x2a\x5d\x81\x78\xd2\xb4\x00\x63\xbd\xed\xa1\xe1\xd3\x84\x0d\xf1\x8e\xcd\xd6\xa3\xdb\x3a\x77\xa5\x73\xd3\xe4\x0e\x71\x70\x1a\x57\x43\xe8\xc4\xf3\xa9\x98\x4b\x65\xb1\x55\x60\x8c\x31\x3f\x3d\x46\x73\x03\x00\x96\x23\x6e\xa4\x81\x53\x63\x32\xd6\x27\xd7\x31\xfb\x9e\xa9\xf7\x2c\x4d\x42\x7f\x9e\x40\xcd\xd8\x08\x78\x58\xbf\xce\x4a\xd7\x0d\x01\xf5\x8c\xab\x70\x22\x9b\x24\x03\xd9\x52\x3f\x59\xde\x47\x05\x32\xae\xc1\xcc\x82\xde\xa2\x0d\x06\x40\x52\xd5\x76\x60\xe4\x56\x9e\x8c\x95\xb4\x2d\x85\xbb\xba\xe5\x11\x9b\x37\x5d\xa7\x2e\xcc\xe0\x99\xbb\xc1\xc3\x46\x43\x85\xa6\xd7\x0c\x96\x93\x17\xec\x2e\x87\xe2\x66\xab\x55\x23\x79\xd4\xc5\xb1\xd9\xc0\xd2\x4f\xdc\x77\x97\xdf\x92\x48\x93\xf3\x46\xac\x06\x69\x6a\xd0\x28\xed\xb2\x1f\x8d\x30\x63\x70\x34\x76\xba\xd7\x26\xba\xd5\x50\x67\x2c\xd7\x08\x37\xd1\xad\xd2\xa1\x24\x83\xb9\x5c\x34\x83\xd1\x03\x59\xe9\xd4\x9c\x31\x28\x2c\xed\x70\x38\xfd\x86\x13\xab\x71\x2b\x83\x7b\x20\xce\x8f\x2d\xaf\x35\x78\x59\xfb\xed\x60\x15\x77\xfb\xd8\x2a\x0e\x0b\xe9\xca\xbd\x01\xed\xaa\xe6\x08\xa8\x19\xf1\xf5\xd4\xff\xb6\xfb\xe4\x64\x55\xa6\xa3\x6d\xb2\x4c\x5b\xe9\xd8\xcb\xf8\x25\x2f\x34\xa7\x53\x75\x5b\x2c\x07\x0b\x7e\x19\x8d\x03\xeb\x44\x0c\x72\x63\x35\x14\x76\x84\xf1\x53\x20\x1e\x61\x4d\x06\xac\xfb\xfb\x13\xb3\x12\x76\xad\xc9\xf0\x88\x4e\x3b\x95\x6b\x55\x04\x69\x09\x3b\x47\xbc\xbb\x9b\x7f\x54\xba\x6e\x8c\x23\xaf\x62\x1f\xf8\x2a\xf6\x1b\xfa\xff\x01\x00\x00\xff\xff\x42\xd3\xce\x17\xb9\x0b\x00\x00")

func resStandaloneHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resStandaloneHtml,
		"res/standalone.html",
	)
}

func resStandaloneHtml() (*asset, error) {
	bytes, err := resStandaloneHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/standalone.html", size: 3001, mode: os.FileMode(420), modTime: time.Unix(1555712757, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"res/standalone.html": resStandaloneHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"res": &bintree{nil, map[string]*bintree{
		"standalone.html": &bintree{resStandaloneHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
