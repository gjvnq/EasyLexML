// Code generated by go-bindata. DO NOT EDIT.
// sources:
// res/standalone.html

package easyLexML

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataResStandalonehtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x56\xcd\x72\xe3\x36\x0c\x3e\x6b\x9f\x02\xf5\xce\x76\xb3\x53\xcb\x96" +
		"\xb3\x49\xb6\x23\xcb\xee\xcf\xb6\x3d\xed\x4c\x7b\x48\x0f\x3d\x42\x14\x6c\x72\x42\x91\x1a\x12\xb2\xe3\xcd\xe4\xdd" +
		"\x3b\x94\xe4\x98\x76\xe2\xe4\x64\x0a\xc0\x87\x0f\xc4\x0f\xe1\xe2\x87\x3f\xfe\xfe\x7a\xfb\xdf\x3f\x7f\x82\xe4\x5a" +
		"\x2f\xdf\x15\xfd\x4f\x52\x48\xc2\x6a\xf9\x2e\x49\x8a\x9a\x18\x41\x48\x74\x9e\x78\x31\xfa\xf7\xf6\xaf\xf4\xe7\xd1" +
		"\x41\x61\xb0\xa6\xc5\x68\xa3\x68\xdb\x58\xc7\x23\x10\xd6\x30\x19\x5e\x8c\xb6\xaa\x62\xb9\xa8\x68\xa3\x04\xa5\xdd" +
		"\xc7\x18\x94\x51\xac\x50\xa7\x5e\xa0\xa6\xc5\xac\x77\xc3\x8a\x35\x2d\x1f\x1e\x26\xb7\xe1\xf0\xf8\x58\x4c\x7b\x49" +
		"\xd0\x79\xde\xf5\xa7\xe4\x57\x55\x07\x02\x68\x9d\xbe\xf8\x28\x99\x1b\x9f\x4f\xa7\x2b\x6b\xd8\x4f\xd6\xd6\xae\x35" +
		"\x61\xa3\xfc\x44\xd8\x7a\x2a\xbc\xff\x65\x85\xb5\xd2\xbb\xc5\x37\x55\x3a\xfa\xe9\x77\xf4\x77\xe4\x36\x4a\x6b\xca" +
		"\xaf\xb2\x6c\x7c\x95\x65\x6a\xfc\x25\xcb\x7e\xf4\x6d\x19\xee\xa4\x91\x95\x49\xe9\x9e\x3f\x7e\x9a\x07\xaa\xd2\x56" +
		"\x3b\x78\x08\xa7\x24\x10\xa4\x5e\x7d\xa7\x1c\x66\x37\xcd\x7d\xa7\x4e\x6a\x74\x6b\x65\x52\xb6\x4d\x0e\x97\x8e\xea" +
		"\xf9\xc1\xb4\xe7\xcd\x61\xd4\x31\x43\xc4\x3c\x1a\x83\x47\xe3\x53\x4f\x4e\xad\x22\xc4\x06\x9d\x42\xc3\xa9\x69\x6b" +
		"\x72\x4a\xe4\xc0\x58\xb6\x1a\x5d\x10\xf8\xde\x8e\xe9\x9e\x53\xd4\x6a\x6d\x72\xd0\xb4\xe2\x48\xea\xc8\x54\xe4\x94" +
		"\x59\xe7\x60\x1b\x56\xb5\xfa\x4e\xdf\x68\xad\x4a\xa5\x15\xef\x7a\x3b\xb9\x6b\x24\x19\x9f\x03\xb6\x6c\x7b\x91\x56" +
		"\x86\x52\x49\x6a\x2d\x39\x87\xcb\x2c\xfb\xd0\x89\x1f\xbb\x34\xd7\x54\x29\x04\x2f\x1c\x91\x01\x34\x15\x5c\xd4\xca" +
		"\xf4\xf5\xcb\xe1\xf3\x8d\xa3\xfa\xd3\x90\x9b\x28\x4d\x49\xac\xef\x39\xf6\x59\x0a\x01\xe7\x20\x50\x8b\x8b\xeb\xec" +
		"\x03\xa4\xbd\x0d\x4c\xe1\xb2\x4f\x76\x4f\x7b\x96\x1b\xef\xdf\xe4\x8e\x6b\x74\xb5\xaf\xd1\xc1\xab\x27\xc1\xca\x9a" +
		"\xf7\x6c\x05\xb4\x7a\x00\x69\xe5\x39\xed\x9a\x2b\xe5\x5d\x43\x39\x18\x6b\x68\xfe\x22\x66\x79\x40\x35\x58\x55\x5d" +
		"\xae\xb3\x83\xa9\x9c\x8d\x41\x5e\x8e\x41\x7e\x1e\x83\xbc\x1a\x83\xbc\x1e\x83\xbc\x19\x00\x71\xe5\x04\x19\x26\x77" +
		"\x00\xe2\x44\x63\x49\x7a\x0c\xc3\x21\xdf\x28\xaf\x98\xaa\x01\x2a\xac\xb6\x2e\x87\xf7\x59\x96\x45\xf5\xae\x48\x58" +
		"\x87\x21\xb6\x33\x21\xc3\x12\x70\xf0\x10\xb7\xe9\xec\xa9\x2e\x67\x42\x4a\x2a\xe5\x1b\x8d\xbb\x1c\x4a\x6d\xc5\x5d" +
		"\xd4\xa0\xdb\xa1\x4f\x4a\xab\xab\x79\x9c\x86\xd3\x01\xd8\x8b\x4b\xcb\x6c\xeb\x88\xf3\x59\x7c\x4b\xf0\x0d\x9a\x21" +
		"\xcc\x97\x88\xe3\xd0\xd3\x6c\x72\xfd\xc4\x31\x28\xf6\x14\xb1\xee\x0c\x4b\x6e\x58\xa6\x42\x2a\x5d\x5d\xcc\x3e\x1d" +
		"\x4d\x75\xa8\x7e\x0e\x8a\x51\x2b\xf1\xc2\x7d\x8d\x75\x35\xea\x57\x5d\x6b\xf4\xdc\xfb\x8e\x1d\x3f\x4f\x58\xcc\x77" +
		"\xea\xb6\x39\xaa\xd6\x51\x6b\x0d\x8c\x13\xdf\x96\x81\x31\xfa\x3a\x6a\xc7\x61\xc4\x66\x51\x2a\xa0\xeb\x4c\xf7\x6a" +
		"\x23\x9c\xa4\xf2\xb8\x5a\x39\xa3\x5b\x13\x0f\x0e\xd0\xa8\xba\x6b\xba\x34\xbc\xf6\x39\x48\xb5\x96\x3a\x5c\x72\x7e" +
		"\xa2\xae\xda\x7d\x73\x5e\xfa\xe8\x4d\xb9\xa3\xdd\xca\x61\x4d\xfe\x80\x1c\x3c\x67\x1f\xe0\xa1\x44\x71\xb7\x76\xb6" +
		"\x35\x55\xba\x6f\xfa\xd5\x0a\xe7\x1d\x34\xf9\x72\xfd\x96\xc5\x2c\x7b\xd9\x49\x37\x1e\x87\x67\x00\xc7\x80\x27\x23" +
		"\x76\x7e\xa2\x92\xad\x75\x55\x5a\x3a\xc2\xbb\x1c\xba\x9f\x14\x75\x5f\xb4\xc4\x6e\xc8\xad\xb4\xdd\xa6\x5b\x87\xcd" +
		"\x5e\x1b\xec\xe7\xf1\xdc\x96\xba\x8d\x86\x13\x73\x19\x60\x21\x04\x14\xac\x36\x74\x2e\x82\x36\x3c\xe7\xe1\x79\x7e" +
		"\xc2\x16\xd3\xfd\x0e\x2c\xa6\xc3\x4a\x2e\xc2\xeb\xd7\xad\xc7\x20\x20\x07\xaa\x5a\x8c\xfa\x63\xb7\x51\x93\x42\xce" +
		"\x8e\xf6\xa9\x9c\x75\xd6\xd3\xde\xa6\x5f\xac\x43\x37\x07\x68\xd8\xe3\x15\x32\xf6\xeb\x78\x3a\xa8\x9e\x99\x61\xe9" +
		"\xd9\xa1\xe0\x23\x8e\xdf\x06\xe1\x09\x57\x12\xa9\x1e\x1f\x5f\x75\xcb\x56\x8c\xf6\x90\x5b\x2b\xde\xb0\x16\xd6\x35" +
		"\xad\x7f\x02\x7c\xed\x3e\x9f\x61\x8a\x69\x9f\xa2\x62\xda\xfd\x9b\xf9\x3f\x00\x00\xff\xff\xd5\x68\x3a\xa7\xe4\x08" +
		"\x00\x00")

func bindataResStandalonehtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataResStandalonehtml,
		"res/standalone.html",
	)
}

func bindataResStandalonehtml() (*asset, error) {
	bytes, err := bindataResStandalonehtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "res/standalone.html",
		size:        2276,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1554254288, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"res/standalone.html": bindataResStandalonehtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"res": {Func: nil, Children: map[string]*bintree{
		"standalone.html": {Func: bindataResStandalonehtml, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
