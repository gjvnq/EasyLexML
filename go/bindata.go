// Code generated by go-bindata.
// sources:
// res/standalone.html
// DO NOT EDIT!

package easyLexML

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resStandaloneHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\x4d\x6f\xdb\x46\x10\x3d\x33\xbf\x62\xea\x20\x40\x0a\x88\x16\xa9\xc4\x6d\xb1\x62\x84\x1a\x69\x7b\x2a\xd0\x1e\xdc\x43\x8f\x43\x72\xc8\xdd\x7a\xb9\x4b\x2c\x87\x76\x15\x43\xff\xbd\xd8\x5d\x52\xa2\x64\xbb\xc9\xc5\x1c\xcf\xbc\xf7\x3c\x5f\x3b\x2e\xbe\xfb\xe5\x8f\xcf\x77\x7f\xff\xf9\x2b\x48\xee\xf4\xee\x4d\x11\x3f\x49\x21\x09\xeb\xdd\x9b\x24\x29\x3a\x62\x84\x4a\xa2\x1b\x88\x3f\x5d\xfd\x75\xf7\x5b\xfa\xd3\x55\x08\xb0\x62\x4d\xbb\xa7\xa7\xeb\x3b\x6f\x1c\x0e\xc5\x3a\x7a\x7c\x6c\xe0\x7d\xb4\x92\xd2\xd6\x7b\x78\xf2\x56\xd2\xa1\x6b\x95\x49\xd9\xf6\x02\x36\x8e\xba\x6d\xf0\x36\xd6\x70\xda\x60\xa7\xf4\x5e\xc0\x80\x66\x48\x07\x72\xaa\x59\x04\x07\xf5\x85\x04\xe4\x9b\x9e\x17\xce\x07\x74\x0a\x0d\xa7\x66\xec\xc8\xa9\x4a\x00\x63\x39\x6a\x74\xde\x31\x44\x1c\xd3\xbf\x9c\xa2\x56\xad\x11\xf0\xcf\x38\xb0\x6a\xf6\x8b\x80\x23\x53\x93\x53\xa6\x15\x60\x7b\x56\x9d\xfa\x42\xbf\x53\xab\x4a\xa5\x15\x4f\x38\xb9\xef\x25\x99\x41\x00\x8e\x6c\x83\xeb\xe0\x7f\xfc\xdc\x51\xad\x10\xde\x77\xca\xa4\x8f\xaa\x66\x29\xe0\xa3\xaf\xe7\xfb\xa9\xce\x45\xc9\xc9\x32\x1e\x45\xe7\x36\x68\x6a\x58\x40\x85\xba\x7a\x7f\x93\xbd\x83\x14\x36\xb9\xd7\x88\xa0\xc3\xf1\x8f\x0d\x54\xb1\xb2\xe6\x2d\xdb\x0a\x46\x3d\xc9\x6a\x35\x70\x1a\x7a\x9c\xf2\xbe\x27\x01\xc6\x1a\xda\xbe\xc8\xd9\x9d\x58\x3d\xd6\x75\xa8\x37\x3b\x41\x65\xbe\x02\xb9\x59\x81\xfc\xb0\x02\xf9\x71\x05\xf2\x66\x05\xf2\x87\x89\xb0\x6c\x60\x45\x86\xc9\x2d\x88\x1f\x00\xaf\x35\x96\xa4\x3d\x79\xb6\xc5\x83\x1a\x14\x53\x3d\x09\x54\x56\x5b\x27\xe0\x6d\x96\x65\x8b\xce\xd7\x54\x59\x87\x3e\xc3\xcb\xc4\xfb\x93\x66\x7f\x29\xb9\x82\xa9\x2c\xd8\x9d\x50\xcf\x5c\xaf\x24\x70\x7b\x7b\xbb\x5d\xee\xa0\x53\xad\x64\x01\xd9\xf5\xcd\x71\x2e\x5f\x4d\x6d\xb9\xc4\x73\x0f\xcf\x76\x3a\x3f\x6a\x4d\xde\xd2\x32\xdb\x6e\x11\x38\x9b\x4e\x65\x5d\x3f\x0e\x73\x09\xd7\x95\x3e\xda\xe7\xef\x25\x2e\x4a\x7e\x4a\xf5\x00\x61\x00\xee\x85\x67\xf5\x8d\x29\x08\x46\xd7\x12\x4f\x02\x68\x54\x17\x6a\x4e\x0d\x76\x24\x40\xaa\x56\x6a\xdf\xa0\xed\x45\xb8\x1e\xe7\xde\x6c\x86\xc5\x73\xb8\xa7\x7d\xe3\xb0\xa3\xe1\xc4\x9c\x94\xb3\x77\xf0\x54\x62\x75\xdf\x3a\x3b\x9a\x3a\x9d\xa7\xd1\x34\xb8\x0d\xd4\xe4\xc7\x9b\xaf\x21\xf2\xec\x65\x91\x30\x9d\xd3\x33\xc1\x15\xe0\xc5\xec\x5f\x1f\x68\xf2\x68\x5d\x9d\x96\x8e\xf0\x5e\x40\xf8\xa4\xa8\x75\x0c\xd9\x07\x72\x8d\xb6\x8f\xe9\xa3\xc3\x7e\x8e\x7a\xfc\x76\xb9\x50\xa5\x1e\xcf\xd7\x56\x48\x4f\x0c\x6b\x2b\xb0\x62\xf5\x40\xf1\x59\xcc\xfe\x60\xc7\xc0\x6b\xe9\x8d\xfe\x1e\x69\xb5\x58\xba\x62\x3d\xdf\xd1\x62\x3d\xdd\xe3\xc2\x1f\x97\x70\x62\xbd\x83\x1c\xa8\xfa\xd3\x55\x34\xc3\x55\x4e\x0a\x99\x9f\xdd\x64\x99\x07\xf4\x3a\x62\xe2\x71\x9e\xb6\xcc\x53\xfd\x75\xaf\x91\x31\x9e\xf4\xf5\x14\x7a\x06\x63\x5b\x45\x79\x2f\x6d\xab\xc3\xe1\x7f\xd1\x71\xb3\x8f\x84\xcf\xe1\xd7\x67\x9c\x62\x1d\x6b\x29\xd6\xe1\x7f\xce\x7f\x01\x00\x00\xff\xff\xc8\x63\x59\x63\x8a\x06\x00\x00")

func resStandaloneHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resStandaloneHtml,
		"res/standalone.html",
	)
}

func resStandaloneHtml() (*asset, error) {
	bytes, err := resStandaloneHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/standalone.html", size: 1674, mode: os.FileMode(420), modTime: time.Unix(1552397933, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"res/standalone.html": resStandaloneHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"res": &bintree{nil, map[string]*bintree{
		"standalone.html": &bintree{resStandaloneHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
