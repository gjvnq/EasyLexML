// Code generated by go-bindata.
// sources:
// res/standalone.html
// DO NOT EDIT!

package easyLexML

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resStandaloneHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x6d\x6f\xdb\x38\x12\xfe\xec\xfe\x0a\x9e\x82\x5c\x9c\x3b\xeb\xc5\x6e\xd2\x16\xb2\x9d\xe6\xae\x77\xed\x97\x14\x3d\xa0\xb9\x03\x0e\x8b\xc5\x62\x24\x8e\x2d\x26\x14\x29\x90\x94\x5f\x1a\xe4\xbf\x2f\x28\x52\xb6\x64\x3b\x29\x16\xd8\x4f\x36\xe7\xed\x79\x38\x9c\x19\x52\xb3\xbf\xfc\xeb\xdb\xa7\xfb\xff\xff\xe7\xdf\xa4\x30\x25\xbf\x79\x33\x73\x3f\x83\x59\x81\x40\x6f\xde\x0c\x06\xb3\x12\x0d\x90\xbc\x00\xa5\xd1\xcc\x83\xff\xde\x7f\x0e\x3f\x04\x7b\x85\x80\x12\xe7\xc1\x8a\xe1\xba\x92\xca\x04\x24\x97\xc2\xa0\x30\xf3\x60\xcd\xa8\x29\xe6\x14\x57\x2c\xc7\xb0\x59\x8c\x08\x13\xcc\x30\xe0\xa1\xce\x81\xe3\x7c\xec\xc2\x18\x66\x38\xde\x3c\x3d\x45\xf7\xf6\xcf\xf3\xf3\x2c\x76\x12\xab\xd3\xb9\x62\x95\x21\x5a\xe5\xf3\xa0\x30\xa6\xd2\x69\x1c\xe7\x54\x3c\xe8\x28\xe7\xb2\xa6\x0b\x0e\x0a\xa3\x5c\x96\x31\x3c\xc0\x26\xe6\x2c\xd3\x71\x09\xa6\xb0\x8b\x49\xf4\x3e\xba\x8e\x39\x18\xd4\x26\x7a\xd0\x1f\x73\x29\x16\x6c\x39\xff\xfa\xf5\xee\xb7\xef\xff\xfb\x12\x10\xd0\x5b\x91\xcf\x83\x71\x70\x33\x8b\x1d\xcc\x6b\x88\xd1\x83\xa6\xc8\xd9\x4a\x45\x02\x4d\xbc\x2c\xe2\x7c\x81\x8a\x32\x01\x82\xb2\x58\x97\x52\x9a\x22\xd4\xb9\x92\x9c\xdf\x8e\xaf\x63\xca\xb4\xe9\x4b\xa3\x4a\xf2\xed\x82\x71\xae\xa3\x92\xd9\x68\x7f\x2a\x81\x65\x5d\xea\x42\xe2\xed\x95\x43\xf6\xcb\x3f\x8a\x69\xff\x0e\x16\xb5\xc8\x0d\x93\x82\x7c\x13\x77\x12\x28\x19\x5e\x92\x27\x2b\x1f\xac\x40\x11\xb7\x17\x32\x27\x02\xd7\xe4\x7b\xb3\xbf\xef\x8d\x68\x78\x01\xbf\x14\x0a\x17\x7f\x9b\x07\x67\xc1\xaf\x17\x97\xd3\xbd\x4b\xb5\xf5\xf6\x5f\x1c\xab\xe1\xc5\x99\x91\x39\x81\xd6\x28\x97\x42\x4b\x8e\x11\x97\xcb\x61\xf0\x99\x09\xa6\x0b\xa4\x44\x36\xe8\x81\xb3\x79\xb6\x1c\x7b\x7c\xcd\xd6\x15\xc8\xe0\x96\x95\xb6\xee\x48\xad\xf8\xf0\xa2\x4d\xd7\x42\x0a\xa3\xa3\xa5\x94\x4b\x8e\x50\x31\xdd\x54\x48\xae\xf5\xc7\x05\x94\x8c\x6f\xe7\x77\x2c\x53\xf8\xf7\x7f\x82\x7e\x44\xb5\x62\x9c\x63\x7a\x95\x24\xa3\xab\x24\x61\xa3\xf7\x49\xf2\x57\x5d\x67\xb6\xd4\x39\x18\x26\x42\xdc\x18\xcf\x34\x93\x74\xeb\x73\x61\x01\x42\xcd\x7e\x60\x4a\xc6\x1f\xaa\x8d\xdb\x48\x09\x6a\xc9\x44\x68\x64\x95\x92\x89\xc2\x72\xba\x37\x75\xb8\x29\x09\x1a\x64\xd2\x41\x0e\x46\x44\x83\xd0\xa1\x46\xc5\x16\x1d\x8f\x15\x28\x06\xc2\x84\xa2\x2e\x51\xb1\x3c\x25\x06\xb2\x9a\x83\xb2\x02\xed\xec\x0c\x6e\x4c\x08\x9c\x2d\x45\x4a\x38\x2e\x4c\x47\xaa\x50\x50\x54\x4c\x2c\x53\x22\x2b\xc3\x4a\xf6\x03\xef\x70\xc9\x32\xc6\x99\xd9\x3a\xbb\x62\x5b\x15\x28\x74\x4a\xa0\x36\xd2\x89\x38\x13\x18\x16\xc8\x96\x85\x49\xc9\x24\x49\xce\x77\xc9\x1f\xdc\x96\x48\x19\xd8\xf3\x47\x14\x04\x04\x25\xc3\x92\x09\xd7\xd6\x29\x79\xfb\x4e\x61\xd9\xd6\x49\x27\x4d\x83\xae\xde\x61\xb4\x59\xb2\x84\x53\x32\xf9\xb0\x57\x54\x40\x29\x13\xcb\x50\x39\xfc\xf1\x4e\xd3\x10\x18\x08\x58\x9d\x69\x46\x31\x03\xd5\x46\x6f\xa9\x8e\x93\x64\x55\x4c\x7b\x88\x93\xab\x4e\x60\xa9\x99\xad\xe8\x94\x2c\xd8\x06\xe9\x94\x38\xf1\x8f\x90\x09\x8a\x9b\x94\x8c\xbd\x5d\x73\x70\x89\x5f\x38\x7e\xed\x4a\xae\x50\x2d\xb8\x5c\xa7\xbe\x03\x0e\x28\x3b\xe3\xf1\x8b\x5b\xd9\x29\x32\xa9\x28\xaa\x9d\xbc\xda\x10\x2d\x39\xa3\xe4\x2c\x49\x92\x97\x36\x0b\xed\x76\x7d\xd4\x1d\xab\x63\xd3\x9a\xb7\xb6\xbd\xa3\x1c\x4f\xae\xcf\x4f\x33\xb6\x49\x22\x2f\x04\xe3\x2c\x82\xdc\xb0\x15\xb6\x31\x33\xc8\x1f\x97\x4a\xd6\x82\x86\xb9\xe4\x52\xa5\x24\xe3\x90\x3f\xbe\x44\x66\xef\xbf\xdb\x81\x77\x5b\x17\xcc\x60\xc7\xed\xc5\x0a\x83\xcd\x4f\x2b\xac\xdb\x89\x57\x6d\x27\xee\xa3\x6a\x6c\x86\x59\x33\x71\x76\xd9\xe1\x4c\x9b\xb0\x19\x21\xa1\xd9\x56\x98\x12\x21\x05\x4e\x4f\xfa\xdc\xec\xbd\x0e\xd2\xdf\x98\x16\xe3\x11\x29\x26\x23\x52\xbc\x1d\x91\xe2\x6a\x44\x8a\xeb\x11\x29\xde\x79\x87\x6e\x7f\xe6\x28\x0c\xaa\xbd\x23\x44\x1c\x32\xe4\x23\xe2\xff\xa4\x2b\xa6\x99\x41\xea\x5d\x7d\xa2\xf6\x65\xd1\xc4\xa2\x98\x4b\x05\xae\x94\x5f\xa3\xec\x63\xf6\x79\x87\x99\x34\x46\x96\x3d\xfa\xde\xcd\xba\x78\xe3\xee\x0c\xdb\x77\xe0\x0b\x3b\x19\x50\xa6\x2b\x0e\x5b\x5b\x08\xb2\x2d\x84\xe6\x40\xd6\xbe\xf2\x32\xc9\xe9\xb4\xc7\xe2\x60\x3a\x1e\x92\xdb\x61\x1e\xf1\xbb\x21\xba\x02\xe1\x69\x9e\x02\xee\x52\x0f\x93\xe8\x7a\x87\xe1\x15\x2d\x44\x57\xf7\x02\x4a\x2a\x4c\x11\xe6\x05\xe3\x74\x38\xbe\xec\x8d\x7c\x5b\x34\x29\x61\x06\x38\xcb\x4f\xec\x57\x48\x55\x02\x7f\x35\x34\x07\x6d\x5c\xec\x6e\xe0\xe3\x84\x75\xf1\x0e\xc3\x56\xbd\xd3\x3a\x75\xa4\x91\xae\x33\x8b\xd8\x59\xf5\xab\xc1\x0f\x80\xd3\xa9\x88\x84\x34\xae\xed\x09\x21\xc4\x0d\xad\xde\xb8\x02\x80\x69\x4f\x1b\x2a\xa0\xac\xd6\x29\xd9\x27\xd7\x2a\xf7\x3d\x53\x6d\xc8\x38\xf1\xfd\x79\x04\x35\x22\x3d\xe0\x6e\xfd\xda\x28\x6d\x37\x78\xd4\x13\x54\xe1\xc8\x36\x49\x3a\xb6\x85\x7a\xb5\xbc\x0f\x0a\xa4\x5f\x83\xa9\x01\xb5\x44\xe3\x03\x80\x60\x65\xd3\x81\xa1\x7d\xf7\xa6\xa4\x60\xcb\x82\xdb\xa3\x9b\x1e\xa8\x69\xdd\x76\xea\x44\x77\xae\xd1\x47\xdc\x2e\x14\x94\xa8\xf7\x9e\x3e\x72\x72\x4e\x9e\x8e\x27\xec\xd9\x62\x01\x53\x37\x5b\xdf\x5f\xff\xcc\x62\x9c\x9c\x0e\x62\x14\x08\x5d\x81\x42\x61\xa6\xfb\xd1\x08\x23\x02\x07\x63\xa7\xbd\xe6\xc2\xb5\x82\x2a\x25\x99\x42\x78\x0c\xd7\x52\xd1\x69\x77\x2a\x65\xbc\xee\x8c\x1e\x48\x0b\xeb\x66\x83\xf5\xae\x8b\xa3\x89\x55\xdb\x27\x89\xbd\x97\x4e\x8f\x2d\xe7\xd5\xb9\xd2\xcf\xbb\x4f\x3f\xff\xde\x9b\xc5\xfe\xab\x64\xd6\xdc\x01\x52\x70\x09\x74\x1e\xb8\xa7\xea\xf0\xd2\x7d\x4f\x58\x13\x54\x84\xd1\x79\xe0\xfe\x36\xe2\xc1\xac\x18\xf7\x3e\x32\x8a\x71\x63\x1d\x3b\x1b\xf7\xac\xf4\xed\x6a\x5d\xed\xc7\x0d\x05\x03\x2e\x66\xec\x55\x47\x66\x90\x69\xa3\x20\x37\x3d\x8c\x7f\x78\xe1\x01\xd6\xa0\xa3\x7a\x7e\x3e\x0a\x2b\x60\xd5\x84\xf4\x17\x68\xd0\xba\xdc\xcb\xdc\x5b\x0b\x58\x59\xe1\xd3\x53\xf4\x49\xaa\xaa\xd6\x56\x3c\x8b\x6d\x2a\x6e\xde\xcc\x62\xf7\xe1\xf6\x7b\x00\x00\x00\xff\xff\xf9\xd6\x5b\xaf\xd0\x0d\x00\x00")

func resStandaloneHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resStandaloneHtml,
		"res/standalone.html",
	)
}

func resStandaloneHtml() (*asset, error) {
	bytes, err := resStandaloneHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/standalone.html", size: 3536, mode: os.FileMode(420), modTime: time.Unix(1555713633, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"res/standalone.html": resStandaloneHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"res": &bintree{nil, map[string]*bintree{
		"standalone.html": &bintree{resStandaloneHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
