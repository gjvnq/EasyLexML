// Code generated by go-bindata. DO NOT EDIT.
// sources:
// res/standalone.html

package easyLexML

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataResStandalonehtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x5d\x6f\xdb\x3a\x0c\x7d\x76\x7f\x05\x6f\x8b\x02\x2d\x10\x27\x76" +
		"\xda\xdc\x0b\x28\xbe\xc1\x8a\x6e\xcf\xdb\x43\x5f\xf6\xc8\xd8\x74\x24\x54\x96\x0c\x99\x4e\x96\x05\xf9\xef\x83\x25" +
		"\xbb\x71\xfa\xb1\xbe\xc4\x0c\x79\xce\x11\x4d\x1d\x33\xfb\xe7\xeb\xf7\xc7\xa7\x9f\x3f\xbe\x81\xe4\x4a\xaf\x2e\xb2" +
		"\xf0\x88\x32\x49\x58\xac\x2e\xa2\x28\x63\xc5\x9a\x56\x87\xc3\xf4\xa9\x0b\x8e\xc7\x6c\x16\x32\x5d\xad\xe1\x7d\x88" +
		"\xa2\xb5\x2d\xf6\x70\xe8\xa2\xa8\x42\xb7\x51\x26\x66\x5b\x0b\x98\x3b\xaa\x96\x3e\x5b\x5a\xc3\x71\x89\x95\xd2\x7b" +
		"\x01\x0d\x9a\x26\x6e\xc8\xa9\x72\x54\x6c\xd4\x6f\x12\x90\xce\x6b\x1e\x25\xb7\xe8\x14\x1a\x8e\x4d\x5b\x91\x53\xb9" +
		"\x00\xc6\x75\xab\xd1\x75\x89\xc6\xe3\x8e\xdd\xcf\x97\x8a\x0a\x85\x70\x53\x29\x13\xef\x54\xc1\x52\xc0\xfd\x9c\xaa" +
		"\xdb\xbe\xa5\x51\x77\xd1\xa8\x1c\xce\x19\x1a\xd6\x54\xb2\x80\x1c\x75\x7e\xb3\x48\xae\x21\x86\x79\xea\xa8\xba\x0d" +
		"\xa0\xe3\xcb\x51\x0d\xe5\xac\xac\xb9\x62\x9b\x43\xab\x7b\x55\xad\x1a\x8e\xfd\x34\x62\xde\xd7\x24\xc0\x58\x43\xcb" +
		"\x77\x39\xab\x13\xab\xc6\xa2\x50\x66\x23\x20\x39\x41\x65\x3a\x01\x39\x9f\x80\xbc\x9b\x80\xbc\x9f\x80\x5c\x4c\x40" +
		"\xfe\xdb\x13\x98\x7e\x71\x8c\x5a\x6d\x8c\x80\x9c\x0c\x93\x1b\x11\xef\x00\xa7\x1a\xd7\xa4\x3b\xf2\x10\x8b\xad\x6a" +
		"\x14\x53\xd1\x0b\xe4\x56\x5b\x27\xe0\x2a\x49\xc2\x91\x41\xb1\xa0\xdc\x3a\xec\x3a\x7c\xdd\x78\x7d\xd2\xac\x3f\x91" +
		"\x7c\x78\x78\x58\x8e\xef\xdf\xa9\x8d\x64\x01\xc9\x74\xf1\xe2\x81\x4f\x0f\x1b\x1b\x68\x98\xca\x99\x9f\x92\xe9\xc9" +
		"\x51\x7d\x7e\x6d\x99\x6d\x75\x56\x0a\xf3\x70\xef\xf8\x31\xfd\x88\x9d\x9e\x71\x05\xa3\xdb\x10\xf7\x02\x68\x54\xe5" +
		"\x1b\x8e\x0d\x56\x24\x40\xaa\x8d\xd4\xdd\xdb\x2d\x5f\x95\x8b\x76\x78\xb1\xf9\xd8\x9b\xcf\xb4\x2f\x1d\x56\xd4\x9c" +
		"\x98\xbd\x72\x72\x0d\x87\x35\xe6\xcf\x1b\x67\x5b\x53\xc4\xc3\x28\xcb\x12\x97\x9e\x1a\xfd\xb7\xf8\x0c\x91\x26\xef" +
		"\x8b\xf8\xd1\x9e\x5c\x8b\x13\xc0\x57\x17\xf7\xf1\x6d\x44\x3b\xeb\x8a\x78\xed\x08\x9f\x05\xf8\x47\x8c\x5a\x87\x92" +
		"\xdd\x92\x2b\xb5\xdd\xc5\x3b\x87\xf5\x50\xed\xf0\xcb\xb1\x1b\xd6\xba\x3d\x77\x91\x90\x1d\xd1\xbb\x48\x60\xce\x6a" +
		"\x4b\xc1\xa5\x43\xde\xc7\xa1\xf0\x51\x7b\xad\x29\xc8\x69\x35\x72\x4c\x36\x1b\x16\x50\x36\xeb\xf7\x55\xd6\x7d\xea" +
		"\x7e\x37\x75\x09\x72\xa0\x8a\xff\x2f\x43\x78\xe9\x17\x55\x26\xd3\xb3\x65\x26\x53\x8f\x9e\x05\x4c\xd8\x6a\xe1\x6b" +
		"\xf5\xd4\x8a\x18\x0b\x64\xbc\x0c\xa8\xbe\xf4\x06\xc6\x36\x0f\xf2\x9d\xb4\xcd\x8f\xc7\xbf\xa2\x73\xeb\xea\xb6\x79" +
		"\x21\x3c\xfa\xbf\x6f\x38\xd9\x2c\xbc\x4b\x36\xf3\x3b\xf9\x4f\x00\x00\x00\xff\xff\xc6\xa7\x94\x87\xaa\x05\x00\x00" +
		"")

func bindataResStandalonehtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataResStandalonehtml,
		"res/standalone.html",
	)
}

func bindataResStandalonehtml() (*asset, error) {
	bytes, err := bindataResStandalonehtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "res/standalone.html",
		size:        1450,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1552347868, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"res/standalone.html": bindataResStandalonehtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"res": {Func: nil, Children: map[string]*bintree{
		"standalone.html": {Func: bindataResStandalonehtml, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
