// Code generated by go-bindata.
// sources:
// res/standalone.html
// DO NOT EDIT!

package easyLexML

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resStandaloneHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x5b\x6f\xe3\xba\x11\x7e\xf6\xfe\x0a\x56\xc1\x36\x4e\x6b\x5d\xec\x93\x9c\x5d\xc8\x97\x93\x76\xdb\xd3\x3e\x64\x71\x0a\x6c\xfa\x50\x14\x45\x31\x12\x47\x16\x13\x8a\x14\x48\xca\x97\x0d\xf2\xdf\x0b\x8a\x94\x2d\xd9\x4e\x0e\x0a\x9c\x27\x9b\x73\xf9\xbe\xe1\x70\x66\x48\x2d\x7e\xf7\x97\x5f\xbe\x3c\xfe\xeb\x1f\x7f\x25\xa5\xa9\xf8\xea\xc3\xc2\xfd\x8c\x16\x25\x02\x5d\x7d\x18\x8d\x16\x15\x1a\x20\x79\x09\x4a\xa3\x59\x06\xff\x7c\xfc\x39\xfc\x1c\x1c\x15\x02\x2a\x5c\x06\x1b\x86\xdb\x5a\x2a\x13\x90\x5c\x0a\x83\xc2\x2c\x83\x2d\xa3\xa6\x5c\x52\xdc\xb0\x1c\xc3\x76\x31\x21\x4c\x30\xc3\x80\x87\x3a\x07\x8e\xcb\xa9\x83\x31\xcc\x70\x5c\xbd\xbc\x44\x8f\xf6\xcf\xeb\xeb\x22\x76\x12\xab\xd3\xb9\x62\xb5\x21\x5a\xe5\xcb\xa0\x34\xa6\xd6\x69\x1c\xe7\x54\x3c\xe9\x28\xe7\xb2\xa1\x05\x07\x85\x51\x2e\xab\x18\x9e\x60\x17\x73\x96\xe9\xb8\x02\x53\xda\xc5\x2c\xfa\x14\xdd\xc5\x1c\x0c\x6a\x13\x3d\xe9\x9f\x72\x29\x0a\xb6\x5e\x7e\xfd\xfa\xf0\xdf\x2f\x7f\x7f\xfc\xfa\x10\x10\xd0\x7b\x91\x2f\x83\x69\xb0\x5a\xc4\x8e\xe8\x3d\xce\xe8\x49\x53\xe4\x6c\xa3\x22\x81\x26\x5e\x97\x71\x5e\xa0\xa2\x4c\x80\xa0\x2c\xd6\x95\x94\xa6\x0c\x75\xae\x24\xe7\xf7\xd3\xbb\x98\x32\x6d\x86\xd2\xa8\x96\x7c\x5f\x30\xce\x75\x54\x31\x8b\xf6\x9b\x06\xb0\x6e\x2a\x5d\x4a\xbc\xbf\x75\xcc\x7e\xf9\xff\x72\xda\xbf\xa3\xa2\x11\xb9\x61\x52\x90\x5f\xc4\x83\x04\x4a\xc6\x37\xe4\xc5\xca\x47\xb9\x14\x5a\x72\x8c\xb8\x5c\x8f\x83\x6f\x06\x94\x41\x4a\x64\x6b\x14\xdc\xcc\x5b\x93\x0d\x28\xe2\xb6\x4b\x96\x44\xe0\x96\x7c\x6b\x53\xf0\xad\x15\x8d\xaf\xe1\xdf\xa5\xc2\xe2\x0f\xcb\xe0\x2a\xf8\xcf\x75\xdf\xa5\xde\x7b\xfb\xbf\xb9\xc0\xc7\xd7\x57\x46\xe6\x04\xae\x27\x9e\x7b\x24\x50\x1b\xa4\x29\x29\x80\x6b\x6c\x45\xaf\x1e\x60\x10\xd6\xcf\x4c\x30\x5d\x9e\xc6\xf5\x6a\xb7\x38\xd8\xae\xd9\xbb\x0a\x1b\xdd\xb3\xca\x16\x2e\x69\x14\x1f\x5f\x77\xd9\x2e\xa4\x30\x3a\x5a\x4b\xb9\xe6\x08\x35\xd3\x6d\x89\xe5\x5a\xff\x54\x40\xc5\xf8\x7e\xf9\xc0\x32\x85\x7f\xfc\x33\xe8\x67\x54\x1b\xc6\x39\xa6\xb7\x49\x32\xb9\x4d\x12\x36\xf9\x94\x24\xbf\xd7\x4d\x66\x7b\x85\x83\x61\x22\xc4\x9d\xf1\x5b\xcd\x24\xdd\xfb\xed\x58\x82\x50\xb3\xef\x98\x92\xe9\xe7\x7a\xe7\x36\x52\x81\x5a\x33\x11\x1a\x59\xa7\x64\xa6\xb0\x9a\x1f\x4d\x1d\x6f\x4a\x82\x96\x99\xf4\x98\x83\x09\xd1\x20\x74\xa8\x51\xb1\xa2\xe7\xb1\x01\xc5\x40\x98\x50\x34\x15\x2a\x96\xa7\xc4\x40\xd6\x70\x50\x56\xa0\x9d\x9d\xc1\x9d\x09\x81\xb3\xb5\x48\x09\xc7\xc2\xf4\xa4\x0a\x05\x45\xc5\xc4\x3a\x25\xb2\x36\xac\x62\xdf\xf1\x01\xd7\x2c\x63\x9c\x99\xbd\xb3\x2b\xf7\x75\x89\x42\xa7\x04\x1a\x23\x9d\x88\x33\x81\x61\x89\x6c\x5d\x9a\x94\xcc\x92\xe4\xe3\x21\xf9\xa3\xfb\x0a\x29\x03\x5b\x1b\x88\x82\x80\xa0\x64\x5c\x31\xe1\xe6\x42\x4a\x7e\xf8\x51\x61\xd5\x95\x59\x2f\x4d\xa3\xbe\xde\x71\x74\x59\xb2\x01\xa7\x64\xf6\xf9\xa8\xa8\x81\x52\x26\xd6\xa1\x72\xfc\xd3\x83\xa6\x0d\x60\x24\x60\x73\xa5\x19\xc5\x0c\x54\x87\xde\x85\x3a\x4d\x92\x4d\x39\x1f\x30\xce\x6e\x7b\xc0\x52\x33\xdb\x10\x29\x29\xd8\x0e\xe9\x9c\x38\xf1\xf7\x90\x09\x8a\xbb\x94\x4c\xbd\x5d\x7b\x70\x89\x5f\xb8\xf8\xba\x95\xdc\xa0\x2a\xb8\xdc\xa6\xbe\x3b\x4e\x42\x76\xc6\xd3\x37\xb7\x72\x50\x64\x52\x51\x54\x07\x79\xbd\x23\x5a\x72\x46\xc9\x55\x92\x24\x6f\x6d\x16\xba\xed\x7a\xd4\x43\x54\xe7\xa6\x0d\xef\x6c\x07\x47\x39\x9d\xdd\x7d\xbc\x1c\xb1\x4d\x12\x79\x03\x8c\xb3\x08\x72\xc3\x36\x48\x56\x04\x3c\x6c\x06\xf9\xf3\x5a\xc9\x46\xd0\x30\x97\x5c\xaa\x94\x50\x50\xcf\x19\x6f\xf0\xad\x90\x06\x28\x5d\x74\xde\x77\x5b\x32\xd3\x77\x7c\xb3\xd2\x60\xf7\xab\x95\xd6\xef\xc8\xdb\xae\x23\x8f\xa8\x1a\xdb\x99\xd8\x4e\xa5\x43\x96\x38\xd3\x26\x6c\x47\x49\x68\xf6\x35\xa6\x44\x48\x81\xf3\x8b\x3e\xab\xa3\xd7\xc9\x31\xb4\xa6\xe5\x74\x42\xca\xd9\x84\x94\x3f\x4c\x48\x79\x3b\x21\xe5\xdd\x84\x94\x3f\x7a\x87\x7e\x9f\xe6\x28\x0c\xaa\xa3\x23\x44\x1c\x32\xe4\x13\xe2\xff\xa4\x1b\xa6\x99\x9d\xcb\xdd\xc8\x6e\x13\x75\x2c\x8f\x16\x8b\x62\x2e\x15\xb8\x92\x7e\x2f\x64\x8f\x39\x8c\x3b\xcc\xa4\x31\xb2\x1a\x84\xef\xdd\x7a\x47\xd4\x9f\x65\xc7\x4e\x7c\x63\x27\x23\xca\x74\xcd\x61\x9f\x92\x8c\xcb\xfc\xb9\x37\xc5\xb6\xbe\x02\x33\xc9\xe9\x7c\x10\xc5\xc9\x94\x3c\x0d\xee\xc0\x79\x16\xdf\x8a\xe8\x1a\x84\x0f\xf3\x12\x71\x3f\xf4\x30\x89\xee\x0e\x1c\x5e\xd1\x51\xf4\x75\x6f\xb0\xa4\xc2\x94\x61\x5e\x32\x4e\xc7\xd3\x9b\xc1\xe8\xb7\x45\x93\x12\x66\x80\xb3\xfc\xc2\x7e\x85\x54\x15\xf0\x77\xa1\x39\x68\xe3\xb0\xfb\xc0\xe7\x09\xeb\xf3\x9d\xc2\xd6\x83\xd3\xba\x74\xa4\x91\x6e\x32\xcb\xd8\x5b\x0d\xab\xc1\x0f\x82\xcb\xa9\x88\x84\x34\xd8\x3a\x10\x42\x88\x1b\x5e\x83\xb1\x05\x00\xf3\x81\x36\x54\x40\x59\xa3\x53\x72\x4c\xae\x55\x1e\x7b\xa6\xde\x91\x69\xe2\xfb\xf3\x8c\x6a\x42\x06\xc4\xfd\xfa\xb5\x28\x5d\x37\x78\xd6\x0b\xa1\xc2\x99\x6d\x92\xf4\x6c\x4b\xf5\x6e\x79\x9f\x14\xc8\xb0\x06\x53\x03\x6a\x8d\xc6\x03\x80\x60\x55\xdb\x81\xa1\x7d\x40\xa7\xa4\x64\xeb\x92\xdb\xa3\x9b\x9f\xa8\x69\xd3\x75\xea\x4c\xf7\xae\xd3\x67\xdc\x17\x0a\x2a\xd4\x47\x4f\x8f\x9c\x7c\x24\x2f\xe7\x63\xf6\xaa\x28\x60\xee\xa6\xeb\xa7\xbb\x5f\xb3\x98\x26\x97\x41\x8c\x02\xa1\x6b\x50\x28\xcc\xfc\x38\x1a\x61\x42\xe0\x64\xec\x74\xd7\x5d\xb8\x55\x50\xa7\x24\x53\x08\xcf\xe1\x56\x2a\x3a\xef\x4f\xa5\xc3\xd8\x77\x30\x69\x69\xdd\x2c\x98\x1f\xf8\x2f\x97\x27\x56\x63\x9f\x26\xf6\x7e\xba\x3c\xb6\x9c\x57\xef\x6a\xff\xd8\x7f\x02\xfa\x77\xdf\x22\xf6\x9f\x37\x8b\xf6\x0e\x90\x82\x4b\xa0\xcb\xc0\xbd\x78\xc7\x37\xee\xc3\xc4\x9a\xa0\x22\x8c\x2e\x03\xf7\xb7\x15\x8f\x16\xe5\x74\xf0\xb5\x52\x4e\x5b\xeb\xd8\xd9\xb8\xe7\xa5\x6f\x57\xeb\x6a\xbf\x92\x28\x18\x70\x98\xb1\x57\x9d\x99\x41\xa6\x8d\x82\xdc\x0c\x38\xfe\xe4\x85\x27\x5c\xa3\x9e\xea\xf5\xf5\x0c\x56\xc0\xa6\x85\xf4\x57\x68\xd0\xb9\x3c\xca\xdc\x5b\x0b\xd8\x58\xe1\xcb\x4b\xf4\x45\xaa\xba\xd1\x56\xbc\x88\x6d\x2a\x56\x1f\x16\xb1\xfb\x02\xfc\x5f\x00\x00\x00\xff\xff\xe0\x53\x44\x1b\x19\x0e\x00\x00")

func resStandaloneHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resStandaloneHtml,
		"res/standalone.html",
	)
}

func resStandaloneHtml() (*asset, error) {
	bytes, err := resStandaloneHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/standalone.html", size: 3609, mode: os.FileMode(420), modTime: time.Unix(1555714202, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"res/standalone.html": resStandaloneHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"res": &bintree{nil, map[string]*bintree{
		"standalone.html": &bintree{resStandaloneHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
