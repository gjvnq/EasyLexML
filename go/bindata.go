// Code generated by go-bindata.
// sources:
// res/standalone.html
// DO NOT EDIT!

package easyLexML

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resStandaloneHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x56\x4d\x73\xdb\x36\x13\x3e\x33\xbf\x02\xaf\x32\x79\xe3\x4c\x49\x89\x72\xed\xa6\x03\x51\xea\x47\xda\x9e\x32\xd3\x1e\xdc\x43\x8f\x4b\x70\x25\xa0\x06\x01\x0e\xb0\x94\xa2\x78\xf4\xdf\x3b\xe0\x87\x05\xc9\x92\x73\x12\xb0\xbb\xcf\x3e\xcb\xfd\xc0\xaa\xf8\xdf\x6f\x7f\x7e\x7a\xf8\xe7\xaf\xdf\x99\xa4\x5a\xaf\xde\x14\xfd\x4f\x52\x48\x84\x6a\xf5\x26\x49\x8a\x1a\x09\x98\x90\xe0\x3c\xd2\x72\xf2\xf7\xc3\x1f\xd9\x8f\x93\xa3\xc2\x40\x8d\xcb\xc9\x56\xe1\xae\xb1\x8e\x26\x4c\x58\x43\x68\x68\x39\xd9\xa9\x8a\xe4\xb2\xc2\xad\x12\x98\x75\x97\x94\x29\xa3\x48\x81\xce\xbc\x00\x8d\xcb\x79\xef\x86\x14\x69\x5c\x3d\x3d\x4d\x1f\xc2\xe1\x70\x28\x66\xbd\x24\xe8\x3c\xed\xfb\x53\xf2\xb3\xaa\x03\x01\x6b\x9d\xbe\x79\x2f\x89\x1a\xcf\x67\xb3\xb5\x35\xe4\xa7\x1b\x6b\x37\x1a\xa1\x51\x7e\x2a\x6c\x3d\x13\xde\xff\xb4\x86\x5a\xe9\xfd\xf2\xb3\x2a\x1d\x7e\xf7\x2b\xf8\x47\x74\x5b\xa5\x35\xf2\xbb\x3c\x4f\xef\xf2\x5c\xa5\x1f\xf3\xfc\xff\xbe\x2d\xc3\x37\x69\x20\x65\x32\xfc\x42\xef\x3f\x2c\x02\x55\x69\xab\x3d\x7b\x0a\xa7\xa4\x06\xb7\x51\x26\x23\xdb\x70\x76\xeb\xb0\xee\xf4\x49\xa0\xcd\x7a\x0a\xce\x26\x1d\x09\x8b\x48\x26\x29\xf3\x60\x7c\xe6\xd1\xa9\x75\x84\xf0\xea\x2b\x72\x36\xbf\x6b\x28\x12\x6e\xc1\x29\x30\x94\x99\xb6\x46\xa7\x04\x67\x04\x65\xab\xc1\x05\x81\xef\xed\x08\xbf\x50\x06\x5a\x6d\x0c\x67\xff\xb6\x9e\xd4\x7a\x1f\x29\x1c\x9a\x0a\x9d\x32\x1b\xce\x6c\x43\xaa\x56\x5f\xf1\x33\x6e\x54\xa9\xb4\xa2\xc1\x4e\xee\x1b\x89\xc6\x73\x06\x2d\xd9\x5e\xa4\x95\xc1\x4c\xa2\xda\x48\xe2\xec\x36\xcf\xdf\x75\xe2\x43\x97\xe9\x1a\x2b\x05\xcc\x0b\x87\x68\x18\x98\x8a\xdd\xd4\xca\xf4\x25\xe4\xec\x2e\xa4\xe1\xc3\x90\x9e\x28\x53\x49\xac\xef\x39\xc6\xec\x69\x5c\x13\x67\x02\xb4\xb8\xb9\xcf\xdf\xb1\x8c\xdd\xce\x83\x8f\xde\xe8\xf0\xcc\xeb\x51\x90\xb2\xe6\x2d\x59\xc1\x5a\x3d\xb8\xd5\xca\x53\xd6\x75\x41\x46\xfb\x06\x39\x33\xd6\xe0\xe2\x22\x66\x75\x44\x35\x50\x55\x5d\x46\xf2\xa3\xa9\x9c\xa7\x4c\xde\xa6\x4c\x7e\x9f\x32\x79\x97\x32\x79\x9f\x32\xf9\xc3\x00\x88\x53\x2c\xd0\x10\xba\x23\x10\xa6\x1a\x4a\xd4\x29\x1b\x0e\x7c\xab\xbc\x22\xac\x06\xa8\xb0\xda\x3a\xce\xde\xe6\x79\x1e\x55\xa5\x42\x61\x1d\x84\xd8\xae\x84\xcc\x56\x0c\x2e\x34\xd9\xfc\x39\x7b\x57\x42\x4a\x2a\xe5\x1b\x0d\x7b\xce\x4a\x6d\xc5\x63\xd4\x49\xbb\xa1\x9a\xa5\xd5\xd5\x22\x4e\xc3\x79\xfb\x8e\xe2\xd2\x12\xd9\x3a\xe2\x7c\x11\xdf\x8a\xf9\x06\xcc\x10\xe6\x25\xe2\x38\xf4\x2c\x9f\xde\x3f\x73\x0c\x8a\x91\x22\xd6\x5d\x61\xe1\x86\x64\x26\xa4\xd2\xd5\xcd\x7c\xec\xaf\x7e\x6c\x42\xf5\x39\x53\x04\x5a\x89\x0b\xdf\x6b\xac\xab\x41\xbf\xea\x5a\x83\xa7\xde\x77\xec\xf8\x65\xc2\x62\xbe\x73\xb7\xcd\x49\xb5\x4e\x5a\x6b\x64\x3c\x69\xbe\xa1\xed\xe3\xa4\x8c\x1a\xd7\xf3\x5e\xc9\xc9\xd4\xb7\x65\x08\x3c\xba\x5d\x72\x3c\x8f\xd0\xac\x6b\x70\xf7\x6a\x3f\x9d\x55\xe4\xb4\xe8\x9c\xc0\x6d\x90\x06\x07\x60\x54\xdd\xf5\x6e\x16\x5e\x77\xce\xa4\xda\x48\x1d\x62\x5e\x9c\xa9\xab\x76\xec\xf1\x5b\x1f\x3d\x20\x8f\xb8\x5f\x3b\xa8\xd1\x1f\x91\x83\xe7\xfc\x1d\x7b\x2a\x41\x3c\x6e\x9c\x6d\x4d\x95\x8d\xb3\xb3\x5e\xc3\xa2\x83\x26\x1f\xef\xbf\x65\x31\xcf\x2f\x3b\xe9\xa6\xec\xf8\x9a\x40\xca\xe0\x6c\x52\xaf\x0f\x66\xb2\xb3\xae\xca\x4a\x87\xf0\xc8\x59\xf7\x93\x81\xee\x6b\x9f\xd8\x2d\xba\xb5\xb6\xbb\x6c\xe7\xa0\x19\xb5\xc1\x7e\x11\x8f\x7f\xa9\xdb\x68\xc6\x81\xcb\x00\x0b\x21\x80\x20\xb5\xc5\x6b\x11\xb4\xe1\xed\x0e\x6f\xf1\x33\xb6\x98\x8d\x3b\xaf\x98\x0d\x2b\xb8\x08\xcf\x6c\xb7\x0e\x83\x00\x1d\x53\xd5\x72\xd2\x1f\xbb\x0d\x9a\x14\x72\x7e\xb2\x3f\xe5\xbc\xb3\x9e\xf5\x36\xfd\x22\x1d\x5a\x34\x40\xc3\xde\xae\x80\xa0\x5f\xbf\xb3\x41\xf5\xc2\x0c\x4a\x4f\x0e\x04\x9d\x70\xfc\x32\x08\xcf\xb8\x92\x48\x75\x38\xbc\xea\x96\xac\x98\x8c\x90\x07\x2b\xbe\x61\x2d\xac\x6b\x5a\xff\x0c\xf8\xd4\x5d\x5f\x60\x8a\x59\x9f\xa2\x62\xd6\xfd\x7b\xf9\x2f\x00\x00\xff\xff\x79\x0c\x5a\xfd\xd4\x08\x00\x00")

func resStandaloneHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resStandaloneHtml,
		"res/standalone.html",
	)
}

func resStandaloneHtml() (*asset, error) {
	bytes, err := resStandaloneHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/standalone.html", size: 2260, mode: os.FileMode(420), modTime: time.Unix(1553276472, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"res/standalone.html": resStandaloneHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"res": &bintree{nil, map[string]*bintree{
		"standalone.html": &bintree{resStandaloneHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
