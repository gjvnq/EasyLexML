// Code generated by go-bindata.
// sources:
// res/standalone.html
// DO NOT EDIT!

package easyLexML

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resStandaloneHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\x41\x6f\xeb\x36\x0c\x3e\xfb\xfd\x0a\xae\x0f\x0f\x78\x03\xe2\xc4\x4e\x9b\x6d\x50\xdc\x60\x45\xb7\x9d\x06\x6c\x87\xee\xb0\xa3\x6c\xd3\x96\x56\x59\x32\x64\x3a\x59\x1a\xe4\xbf\x0f\x92\xec\xc4\x49\xdb\xf5\x5d\x62\x86\xfc\xbe\xcf\xa4\x48\xd1\xd9\x77\xbf\xfc\xf1\xf8\xf4\xf7\x9f\xbf\x82\xa0\x46\x6d\x3e\x65\xe1\x11\x65\x02\x79\xb9\xf9\x14\x45\x59\x83\xc4\xa1\x10\xdc\x76\x48\xf7\x37\x7f\x3d\xfd\x16\xff\x74\xe3\x03\x24\x49\xe1\xe6\x70\x98\x3f\x39\xe3\x78\xcc\x16\xc1\xe3\x62\x1d\xed\x83\x15\xe5\xa6\xdc\xc3\xc1\x59\x51\xc3\x6d\x2d\x75\x4c\xa6\x65\xb0\xb4\xd8\xac\xbd\xb7\x32\x9a\xe2\x8a\x37\x52\xed\x19\x74\x5c\x77\x71\x87\x56\x56\x93\x60\x27\x5f\x90\x41\xba\x6c\x69\xe2\xdc\x72\x2b\xb9\xa6\x58\xf7\x0d\x5a\x59\x30\x20\x9e\xf7\x8a\x5b\xe7\xe8\x02\x8e\xf0\x5f\x8a\xb9\x92\xb5\x66\xf0\x4f\xdf\x91\xac\xf6\x93\x80\x45\x5d\xa2\x95\xba\x66\x60\x5a\x92\x8d\x7c\xc1\xdf\xb1\x96\xb9\x54\x92\x02\xee\xe8\x7e\x7e\x6e\xb0\x94\x1c\xbe\x36\x52\xc7\x3b\x59\x92\x60\x70\xe7\x92\xff\x7e\x28\x6a\x52\x5f\x34\x8d\x87\x37\x8d\x35\x2b\xac\x88\x41\xc1\x55\xf1\x75\x95\x7c\x81\x18\x96\xa9\xd3\x08\xa0\xe3\xe9\x65\x1d\x16\x24\x8d\xfe\x4c\xa6\x80\x5e\x0d\xb2\x4a\x76\x14\xfb\x03\x8d\x69\xdf\x22\x03\x6d\x34\xae\xdf\xe4\x6c\xce\xac\x96\x97\xa5\x2f\x2e\x39\x43\x45\x3a\x03\xb1\x9c\x81\xb8\x9d\x81\xb8\x9b\x81\x58\xcd\x40\xfc\x30\x10\xa6\xa7\x55\xa0\x26\xb4\x13\xe2\x2d\xf0\xb9\xe2\x39\x2a\x47\x1e\x6d\xb6\x95\x9d\x24\x2c\x07\x81\xc2\x28\x63\x19\x7c\x4e\x92\x64\x72\xcc\x25\x16\xc6\x72\x97\xe1\x75\xe2\xed\x59\xb3\xbd\x96\x9c\xc1\x50\x16\x6c\xce\xa8\x57\xae\x77\x12\x78\x78\x78\x58\x4f\x07\xce\xca\x5a\x10\x83\x64\xbe\x3a\xf5\xe5\xc3\xd4\xa6\x13\x3b\x9e\xe1\xc5\x00\xa7\x27\xad\xc1\x9b\x1b\x22\xd3\x4c\x02\x17\xdd\x29\x8c\x6d\xfb\x6e\x2c\x61\x5e\xa8\x93\x7d\x79\x39\xc2\xa0\xa4\xe7\x54\x8f\xe0\x1b\x60\xdf\xb8\x43\xdf\x98\x02\x23\x6e\x6b\xa4\x41\x80\x6b\xd9\xf8\x9a\x63\xcd\x1b\x64\x20\x64\x2d\x94\x3b\xa0\xf5\x55\xb8\xec\xc7\xb3\x59\x76\x93\xeb\xf0\x8c\xfb\xca\xf2\x06\xbb\x33\x73\x50\x4e\xbe\xc0\x21\xe7\xc5\x73\x6d\x4d\xaf\xcb\x78\xec\x46\x55\xf1\xb5\xa7\x46\x3f\xae\x3e\x42\xa4\xc9\xdb\x22\xbe\x3b\xe7\x6b\xc2\x67\xc0\xaf\x7a\xff\x7e\x43\xa3\x9d\xb1\x65\x9c\x5b\xe4\xcf\x0c\xfc\x23\xe6\x4a\x85\x90\xd9\xa2\xad\x94\xd9\xc5\x3b\xcb\xdb\x31\xea\xf0\xeb\xe9\x40\xe5\xaa\xbf\x1c\x5b\x26\x1c\xd1\x8f\x2d\xe3\x05\xc9\x2d\x86\x6b\x31\xfa\xbd\x1d\x02\xef\xa5\xd7\xbb\xe5\xa3\xe4\x64\xe8\xb2\xc5\xb8\x34\xb3\xc5\xb0\x7c\x33\xb7\x5c\xfc\x3e\x75\x0e\xb4\x20\xcb\xfb\x9b\x60\xfa\x15\x1c\x65\x22\xbd\x58\xc0\x22\xf5\xe8\x45\xc0\x84\x4d\x3c\x4c\x99\xa3\xba\x55\x5e\x72\xe2\x61\x7f\x2f\x86\xd0\x2b\x18\x99\x22\xc8\x3b\x69\x53\x1c\x8f\xff\x8b\x0e\x93\x7d\x22\x3c\xfa\xbf\xaf\x38\xd9\x22\xd4\x92\x2d\xfc\x07\xe6\xbf\x00\x00\x00\xff\xff\xcf\xc2\x29\x76\x77\x06\x00\x00")

func resStandaloneHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resStandaloneHtml,
		"res/standalone.html",
	)
}

func resStandaloneHtml() (*asset, error) {
	bytes, err := resStandaloneHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/standalone.html", size: 1655, mode: os.FileMode(420), modTime: time.Unix(1552392421, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"res/standalone.html": resStandaloneHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"res": &bintree{nil, map[string]*bintree{
		"standalone.html": &bintree{resStandaloneHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
