// Code generated by go-bindata.
// sources:
// res/standalone.html
// DO NOT EDIT!

package easyLexML

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resStandaloneHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x6d\x6f\xdb\x38\x12\xfe\xec\xfe\x0a\x9e\x82\x9e\x9d\xab\xf5\xe2\x34\xd9\x2d\x14\x3b\xdb\x6e\xb7\x7b\xbb\x40\x8a\x1e\xae\xd9\x0f\x87\xc3\xa2\x18\x91\x63\x8b\x09\x45\xea\x48\xca\x8e\x1b\xe4\xbf\x1f\x28\x52\xb6\x94\x38\x7d\x01\xf6\x4b\x2b\xcd\xcb\x33\xcf\x0c\x67\x86\x8a\xe7\x7f\xfb\xe5\xc3\xdb\xab\xff\xfc\xeb\x1d\x29\x6d\x25\x2e\x9e\xcd\xfd\x7f\xa3\x79\x89\xc0\x2e\x9e\x8d\x46\xf3\x0a\x2d\x10\x5a\x82\x36\x68\x17\xd1\x1f\x57\xbf\xc6\xaf\xa2\xbd\x42\x42\x85\x8b\x68\xcd\x71\x53\x2b\x6d\x23\x42\x95\xb4\x28\xed\x22\xda\x70\x66\xcb\x05\xc3\x35\xa7\x18\xb7\x2f\x53\xc2\x25\xb7\x1c\x44\x6c\x28\x08\x5c\xcc\x3c\x8c\xe5\x56\xe0\xc5\xdd\x5d\x72\xe5\x1e\xee\xef\xe7\xa9\x97\x38\x9d\xa1\x9a\xd7\x96\x18\x4d\x17\x51\x69\x6d\x6d\xf2\x34\xa5\x4c\x5e\x9b\x84\x0a\xd5\xb0\xa5\x00\x8d\x09\x55\x55\x0a\xd7\x70\x9b\x0a\x5e\x98\xb4\x02\x5b\xba\x97\x93\xe4\xc7\xe4\x2c\x15\x60\xd1\xd8\xe4\xda\xfc\x44\x95\x5c\xf2\xd5\xe2\xfd\xfb\xcb\x4f\x6f\x7f\xbb\x7a\x7f\x19\x11\x30\x5b\x49\x17\xd1\x2c\xba\x98\xa7\x3e\xd0\x97\x62\x26\xd7\x86\xa1\xe0\x6b\x9d\x48\xb4\xe9\xaa\x4c\xe9\x12\x35\xe3\x12\x24\xe3\xa9\xa9\x94\xb2\x65\x6c\xa8\x56\x42\xbc\x9e\x9d\xa5\x8c\x1b\x3b\x94\x26\xb5\x12\xdb\x25\x17\xc2\x24\x15\x77\x68\x7f\x29\x81\x55\x53\x99\x52\xe1\xeb\x53\x1f\x39\xbc\x7e\x6f\x4c\xf7\x38\x5a\x83\x26\x28\xa1\x10\xf8\xc9\x70\x86\x9f\x0a\xd0\x9f\x7c\x0a\x64\x41\xac\x6e\xf0\xbc\xb3\x72\xea\x02\x34\x59\x10\xd9\x08\xd1\x8a\x97\x8d\xa4\x96\x2b\x49\x3e\xc8\x4b\x05\x8c\x4c\x8e\xc9\x9d\x93\x8f\xa8\x92\x46\x09\x4c\x84\x5a\x4d\xa2\x8f\x16\xb4\x45\x46\x54\x6b\x14\x1d\xb7\xae\xa3\x3d\x1c\x53\xb4\xa9\x50\xda\x64\x85\xf6\x9d\x40\xf7\xf8\xf3\xf6\x77\x36\x19\x07\x93\x71\xf0\x68\x49\x74\xd4\x24\x6e\xc8\xc7\xb6\xe2\x1f\x5b\xd1\x64\x0c\xff\x2d\x35\x2e\xff\xb1\x88\x8e\xa2\x3f\xc7\xd3\x40\x64\x64\x6a\x44\x96\x93\xb3\x2c\x9b\xf6\x04\x6f\xcc\x2f\x8d\x06\x47\x3d\x6f\x93\x0c\x3a\x04\xc3\xe5\x2a\x27\x63\x04\x83\xbf\xcb\x0f\x8d\x7d\xdb\x14\x9c\x8e\x83\xba\xa9\x19\x58\xfc\xe3\xdf\x97\x03\xa7\x5a\xd5\xc6\x82\xc5\x81\x90\x0a\x5e\x7b\x41\xfb\x7e\xdf\x4f\xa1\xde\x06\xfe\xff\xf4\xe7\x36\x19\x1f\x59\x45\x09\xec\x49\x4b\x34\xd6\xb1\x5e\x82\x30\x43\x80\x41\x61\x7f\xe5\x92\x9b\xf2\x51\x65\xa1\xb1\xca\x17\xc5\xff\x5b\x80\x9e\x78\xd5\xfd\xe0\xd0\x0e\xd9\xe1\x1a\xa5\xed\x4e\xd1\x0c\x95\x57\x6a\xb2\x3b\x2a\xa1\x68\x5b\xbe\xa4\x04\x53\x1e\x02\x7f\xec\x8b\xfe\x68\x3b\x70\x57\x0a\x0b\x7a\x85\xb6\xdf\x02\xff\x6b\x50\x6f\x3f\xa2\x40\x6a\x95\xee\xce\x74\x11\x8d\x5f\x04\xef\x17\xe3\xe8\xcf\xae\x1f\xf8\x92\x4c\x3a\x04\xdf\x94\x1d\xf6\x48\xa3\x6d\xb4\xf4\x66\xf7\xfd\x76\x4b\x3c\xaf\x2b\x55\xbb\xf6\x6e\x9d\x13\xb5\x5c\x1a\xb4\x4e\x14\x77\x4d\x9e\x50\xc1\x51\xda\xdf\x90\xaf\x4a\x9b\xbe\xdc\xe7\xb7\xe1\x92\xa9\x4d\xa2\xa4\xcb\x9b\x96\x20\x57\x48\x16\x87\x2a\xd9\xba\xec\xd2\x02\xc6\xde\xb9\xca\x5e\x72\x63\x51\xa2\x9e\x8c\x43\x7d\xdc\x68\x8c\xa7\xa4\x2b\xdb\x6e\x80\x9e\x1c\xc9\xb6\x25\xbe\x7a\xce\x53\x6f\x77\xfc\xad\x2c\x54\xfd\x5d\x24\x76\x7b\xe1\xbb\x03\xf9\x74\x0f\x30\xff\x56\xa0\xb0\xeb\xde\x50\xcb\xd7\x60\xb1\x47\x9b\x0c\x9b\xd7\x75\xc7\xe1\x04\x76\x5d\xf2\xb8\x47\xa3\xa3\xe8\x45\x8b\x92\x30\xb4\xc0\x45\x12\x2e\xb8\x84\xb3\xe3\x5e\x37\x0d\xd2\x1e\x6e\x56\xbb\xf5\x97\xd9\xe8\x35\xaf\xdc\x1d\x49\x1a\x2d\x26\xe3\x6e\xb1\x2f\x95\xb4\x26\x59\x29\xb5\x12\x08\x35\x37\xed\x6d\x46\x8d\xf9\x69\x09\x15\x17\xdb\xc5\x25\x2f\x34\xbe\xf8\x19\xcc\x0d\xea\x35\x17\x02\xf3\xd3\x2c\x9b\x9e\x66\x19\x9f\xfe\x98\x65\x7f\x37\x4d\xe1\xae\x65\x01\x96\xcb\x18\x6f\x6d\x98\x84\x42\xb1\x6d\xc8\xc9\x05\x88\x0d\xff\x8c\x39\x99\xbd\xaa\x6f\x3d\xe7\x0a\xf4\x8a\xcb\xd8\xaa\x3a\x27\x27\x1a\xab\xf3\xbd\xa9\x8f\x9b\x93\xa8\x8d\x4c\x7a\x91\xa3\x29\x31\x20\x4d\x6c\x50\xf3\x65\xcf\x63\x0d\x9a\x83\xb4\xb1\x6c\x2a\xd4\x9c\xe6\xc4\x42\xd1\x08\xd0\x4e\x60\xbc\x9d\xc5\x5b\x1b\x83\xe0\x2b\x99\x93\xeb\xc6\x58\xbe\xdc\xf6\x14\x1a\x25\x43\xdd\xee\x59\x55\x5b\x5e\xf1\xcf\x78\x89\x2b\x5e\x70\xc1\x6d\xb0\x2b\xb7\x75\x89\xd2\xe4\x6d\xa3\x78\x91\xe0\x12\xe3\xb2\x9d\xc7\x9c\x9c\x64\xd9\xf3\xf3\xde\x8a\x8a\x0b\x2c\x61\xcd\x95\xce\x89\xbf\x85\xf7\x03\xfb\xba\x42\xc6\xc1\xad\x23\x44\x49\x40\x32\x32\xa9\xb8\xf4\x9f\x28\x39\x79\xf9\x83\xc6\xaa\xeb\x87\x5e\x19\x47\x7d\xbd\x8f\xd4\x55\x51\xe0\xd2\x31\x78\xb5\x57\xd4\xc0\x18\x97\xab\x58\x7b\x72\xb3\x9d\xc6\x6f\x1e\x09\xeb\xa3\xee\xb2\x0b\xe8\x5d\x1e\xb3\x2c\x5b\x97\xe7\x83\x88\x27\xa7\x3d\x60\x65\xb8\xbf\xa3\x96\xfc\x16\xd9\x39\xf1\xe2\xcf\x31\x97\x0c\x6f\x73\x32\x0b\x76\xed\xc1\x66\xe1\xc5\xf3\xeb\xde\xd4\x1a\xf5\x52\xa8\x4d\x1e\x16\xf2\x03\xca\xde\x78\xf6\x64\x2a\x3b\x45\xa1\x34\x43\xbd\x93\xd7\xb7\xc4\x28\xc1\x19\x39\xca\xb2\xec\xa9\x64\xa1\x4b\x37\xa0\xee\x59\x85\x5c\x67\xbb\x63\x1c\x31\x6e\x6a\x01\xdb\x9c\x70\xd9\x9e\x74\x21\x14\xbd\x79\x0a\xb8\x11\x1d\xf2\xa0\x2b\x66\x27\x67\xcf\x0f\xe7\xe7\x4a\x4a\x9e\x00\x13\x3c\x01\xb7\x4c\x90\x5c\x10\x08\xb0\x05\xd0\x9b\x95\x56\x8d\x64\x31\x55\xc2\xb5\x15\x03\x7d\x53\x88\xb0\xf5\xbe\x86\xd2\xb1\x0b\xbe\x9b\x92\xdb\xbe\xe3\x93\x7d\x09\xb7\x5f\xed\xcb\xfe\x7c\x9f\x76\xf3\xbd\x47\x35\xd8\xae\xc2\xf6\x7b\x62\x57\x25\xc1\x8d\x8d\xdb\xc5\x14\xdb\x6d\x8d\x39\x91\x4a\xe2\xf9\x41\x9f\x8b\xbd\xd7\x83\x43\x6b\x4d\xcb\xd9\x94\x94\x27\x53\x52\xbe\x9c\x92\xf2\x74\x4a\xca\xb3\x29\x29\x7f\x08\x0e\xfd\xa9\xa7\x28\x2d\xea\xbd\x23\x24\x02\x0a\x14\x53\x12\x1e\xf2\x35\x37\xdc\x7d\x13\x76\x9f\x8b\x6d\xa1\xf6\xcd\xd4\x62\x31\xa4\xaa\xfb\x48\xfb\x12\xe5\x80\x39\xe4\x1d\x17\xca\x5a\x55\x0d\xe8\x07\xb7\xde\x11\x3d\xc1\x79\xdf\x8e\xbd\x3e\x6c\x4b\xbf\x09\xbd\x56\x28\xc1\xce\x07\xf1\x1e\x6c\xd7\x87\x34\x76\x5b\xe1\x11\x93\x0b\x62\x6a\x90\x81\xd0\xa1\xc0\xfd\xf5\x1d\x67\xc9\xd9\x2e\x46\x50\x74\x21\xfa\xba\x27\xa2\xe4\xd2\x96\x31\x2d\xb9\x60\x93\xd9\xf1\xe0\xca\x70\xed\x91\x13\x6e\x41\x70\x7a\x20\x5f\xa9\x74\x05\xe2\x8b\xd0\x02\x8c\xf5\xd8\x7d\xe0\xc7\x05\xeb\xc7\x7b\x08\x5b\x07\x57\x9f\xd9\xa1\xc3\x4b\x4c\x53\xb8\x88\xbd\xb7\xe1\xb9\x87\x91\x3f\x5c\x8a\x44\x2a\x8b\xde\x81\x10\x42\xfc\x56\x1b\xec\x33\x00\x38\x1f\xaa\x63\x0d\x8c\x37\x26\x27\xbd\xf2\x3a\xed\x6e\x40\x0e\x1e\x6d\x1b\x69\x4a\x06\x71\xfb\x8d\xea\x10\x76\x7d\xdf\x05\x7d\x4c\x15\x1e\x1b\x67\x59\xcf\xb8\xd4\x83\x8a\xf9\x26\x99\x3d\xd5\x21\x43\xa6\x30\x25\xf0\x60\x10\xbb\xeb\x22\xde\x68\xa8\x73\x52\x68\x84\x9b\x78\xa3\x34\x3b\xef\xcf\xe9\x6e\x11\x7a\x98\xbc\x74\x6e\x0e\x2c\xac\xc0\xbb\xc3\x33\xdc\xb8\x7b\xdf\x6d\xec\xc3\x83\xec\xbd\x7a\x57\xe3\xf3\x9d\xdd\x3c\xed\xbe\xab\xe6\x69\xf8\xa5\x62\xde\x6e\x45\x25\x85\x02\xb6\x88\xfc\xdf\x9f\x93\x63\xff\x1b\x83\x33\x41\x4d\x38\x5b\x44\xfe\xb1\x15\x8f\xe6\xe5\x6c\xf0\xc3\x43\x39\x6b\xad\x53\x6f\xe3\x3f\xdf\x42\x5b\x3b\xd7\x0a\x2d\x30\xb0\xe0\x31\xd3\xa0\x7a\x64\x06\x85\xb1\x1a\xa8\x1d\xc4\x78\x13\x84\x0f\x62\x8d\x7a\xaa\xfb\xfb\x47\xb0\x12\xd6\x2d\x64\xb8\x54\xa2\xce\xe5\x4a\xd1\x60\x2d\x61\xed\x84\x77\x77\xc9\x5b\xa5\xeb\xc6\x38\xf1\x3c\x75\xa5\xb8\x78\x36\x4f\xfd\x8f\x39\xff\x0f\x00\x00\xff\xff\x3b\xef\x45\x2a\xe4\x11\x00\x00")

func resStandaloneHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resStandaloneHtml,
		"res/standalone.html",
	)
}

func resStandaloneHtml() (*asset, error) {
	bytes, err := resStandaloneHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/standalone.html", size: 4580, mode: os.FileMode(420), modTime: time.Unix(1555779575, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"res/standalone.html": resStandaloneHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"res": &bintree{nil, map[string]*bintree{
		"standalone.html": &bintree{resStandaloneHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
