// Code generated by go-bindata. DO NOT EDIT.
// sources:
// res/standalone.html

package easyLexML

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataResStandalonehtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x56\x4d\x73\xdb\x36\x13\x3e\x33\xbf\x02\xaf\x32\x7e\x63\x4f\x49\x91" +
		"\x72\xec\x24\x03\x51\xee\x47\xda\x9e\x32\xd3\x1e\xdc\x43\x8f\x4b\x70\x25\x60\x0c\x02\x1c\x60\x29\x59\xd1\xf8\xbf" +
		"\x77\x40\x50\x16\x25\x5b\xce\x49\xe0\xee\x3e\xfb\x2c\xf6\x03\xab\xf2\x7f\xbf\xff\xf5\xf5\xfe\xdf\xbf\xff\x60\x92" +
		"\x1a\x7d\xf7\xae\x8c\x3f\x49\x29\x11\xea\xbb\x77\x49\x52\x36\x48\xc0\x84\x04\xe7\x91\x16\x93\x7f\xee\xff\xcc\xbe" +
		"\x4c\x0e\x0a\x03\x0d\x2e\x26\x6b\x85\x9b\xd6\x3a\x9a\x30\x61\x0d\xa1\xa1\xc5\x64\xa3\x6a\x92\x8b\x1a\xd7\x4a\x60" +
		"\xd6\x7f\xa4\x4c\x19\x45\x0a\x74\xe6\x05\x68\x5c\xcc\xa2\x1b\x52\xa4\xf1\x6e\xb7\x9b\xde\x87\xc3\xd3\x53\x99\x47" +
		"\x49\xd0\x79\xda\xc6\x53\xf2\x8b\x6a\x02\x01\xeb\x9c\xbe\xfc\x20\x89\x5a\xcf\xf3\x7c\x69\x0d\xf9\xe9\xca\xda\x95" +
		"\x46\x68\x95\x9f\x0a\xdb\xe4\xc2\xfb\x9f\x97\xd0\x28\xbd\x5d\x7c\x53\x95\xc3\x9f\x7e\x03\xff\x80\x6e\xad\xb4\x46" +
		"\x7e\x53\x14\xe9\x4d\x51\xa8\xf4\x73\x51\xfc\xdf\x77\x55\xb8\x93\x06\x52\x26\xc3\x47\xfa\x70\x35\x0f\x54\x95\xad" +
		"\xb7\x6c\x17\x4e\x49\x20\xc8\xbc\xfa\x8e\x9c\xcd\xbe\xb4\x8f\xbd\x3a\x69\xc0\xad\x94\xc9\xc8\xb6\x9c\x5d\x3b\x6c" +
		"\xe6\x07\xd3\xc8\xcb\xd9\xa4\x67\x66\x23\xe6\x49\xca\x3c\x18\x9f\x79\x74\x6a\x39\x42\xac\xc1\x29\x30\x94\x99\xae" +
		"\x41\xa7\x04\x67\x04\x55\xa7\xc1\x05\x81\x8f\x76\x84\x8f\x94\x81\x56\x2b\xc3\x99\xc6\x25\x8d\xa4\x0e\x4d\x8d\x4e" +
		"\x99\x15\x67\xb6\x25\xd5\xa8\xef\xf8\x0d\x57\xaa\x52\x5a\xd1\x36\xda\xc9\x6d\x2b\xd1\x78\xce\xa0\x23\x1b\x45\x5a" +
		"\x19\xcc\x24\xaa\x95\x24\xce\xae\x8b\xe2\xa2\x17\x3f\xf5\x69\x6e\xb0\x56\xc0\xbc\x70\x88\x86\x81\xa9\xd9\x65\xa3" +
		"\x4c\xac\x1f\x67\x1f\x3f\x39\x6c\xae\x86\xdc\x8c\xd2\x94\x8c\xf5\x91\x63\x9f\xa5\x10\x30\x67\x02\xb4\xb8\xbc\x2d" +
		"\x2e\x58\x16\x6d\x58\xce\xae\x63\xb2\x23\xed\x59\x6e\x78\xfc\x21\xf7\xb8\x46\x37\xfb\x1a\x1d\xbc\x7a\x14\xa4\xac" +
		"\x79\x4f\x56\xb0\x4e\x0f\x20\xad\x3c\x65\x7d\x73\x65\xb4\x6d\x91\x33\x63\x0d\xce\x5f\xc5\xdc\x1d\x50\x2d\xd4\x75" +
		"\x9f\xeb\xe2\x60\x2a\x67\x29\x93\xd7\x29\x93\x1f\x53\x26\x6f\x52\x26\x6f\x53\x26\x3f\x0d\x80\x71\xe5\x04\x1a\x42" +
		"\x77\x00\xc2\x54\x43\x85\x3a\x65\xc3\x81\xaf\x95\x57\x84\xf5\x00\x15\x56\x5b\xc7\xd9\xfb\xa2\x28\x46\xf5\xae\x51" +
		"\x58\x07\x21\xb6\xb7\x43\x1e\x7c\x1e\xc7\x9d\x55\x96\xc8\x36\x47\xe1\x0f\xb0\x00\x19\x8c\xc7\xdd\x3d\x7b\x2e\xe7" +
		"\x99\x9b\x24\xb5\xf2\xad\x86\x2d\x67\x95\xb6\xe2\x61\xd4\xd7\x9b\xa1\xbd\x2a\xab\xeb\xf9\x51\x14\x27\x73\x73\x1a" +
		"\xdc\x33\xe7\x8b\xf8\xee\x98\x6f\xc1\x0c\x61\xbe\x46\x3c\x0e\x3d\x2b\xa6\xb7\xcf\x1c\x83\x62\x4f\x31\xd6\x9d\x61" +
		"\xe1\x86\x64\x26\xa4\xd2\xf5\xe5\xec\xea\xe8\x31\x08\x4d\xc3\x99\x22\xd0\x4a\xbc\x72\x5f\x63\x5d\x03\xfa\x4d\xd7" +
		"\x1a\x3c\x45\xdf\x63\xc7\x2f\x13\x36\xe6\x3b\x75\xdb\x1e\x55\xeb\xb5\x92\x4e\x7d\x57\x05\xc6\xd1\xd7\x71\x37\xc4" +
		"\xc9\x9c\x8d\x52\xc1\xfa\x86\x76\x6f\x36\xc2\x49\x2a\x8f\xab\xc5\x09\xdc\x0a\x69\x70\x00\x46\x35\x7d\xaf\x66\x61" +
		"\x49\x70\x26\xd5\x4a\xea\x70\xc9\xf9\x89\xba\xee\xf6\x3d\x7d\xed\x47\x4f\xd1\x03\x6e\x97\x0e\x1a\xf4\x07\xe4\xe0" +
		"\xb9\xb8\x60\xbb\x0a\xc4\xc3\xca\xd9\xce\xd4\xd9\x7e\x56\x96\x4b\x98\xf7\xd0\xe4\xf3\xed\x8f\x2c\x66\xc5\xeb\x4e" +
		"\xfa\xa9\x3a\xbc\x1e\x90\x32\x38\x99\xcc\xf3\x83\x98\x6c\xac\xab\xb3\xca\x21\x3c\x70\xd6\xff\x64\xa0\x63\xd1\x12" +
		"\xbb\x46\xb7\xd4\x76\x93\x6d\x1c\xb4\x7b\x6d\xb0\x9f\x8f\xc7\xbd\xd2\xdd\x68\xa6\x81\xcb\x00\x0b\x21\x80\x20\xb5" +
		"\xc6\x73\x11\x74\x61\x0b\x84\x57\xfd\x19\x5b\xe6\xfb\xd5\x59\xe6\xc3\x26\x2f\xc3\xa3\xd9\x6f\xd5\x20\x40\xc7\x54" +
		"\xbd\x98\xc4\x63\xbf\x88\x93\x52\xce\x8e\xd6\xb0\x9c\xf5\xd6\x79\xb4\x89\xfb\x78\xe8\xe6\x00\x0d\xeb\xbf\x06\x82" +
		"\xb8\xc5\xf3\x41\xf5\xc2\x0c\x2a\x4f\x0e\x04\x1d\x71\xfc\x3a\x08\x4f\xb8\x92\x91\xea\xe9\xe9\xd4\x6d\x88\xcd\x8a" +
		"\x5e\xbe\xdb\x4d\xbf\x5a\xd7\x76\x3e\x7c\x95\x79\xbc\x59\x99\xf7\xff\x5d\xfe\x0b\x00\x00\xff\xff\x12\x09\x14\xe0" +
		"\xd2\x08\x00\x00")

func bindataResStandalonehtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataResStandalonehtml,
		"res/standalone.html",
	)
}

func bindataResStandalonehtml() (*asset, error) {
	bytes, err := bindataResStandalonehtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "res/standalone.html",
		size:        2258,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1554255784, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"res/standalone.html": bindataResStandalonehtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"res": {Func: nil, Children: map[string]*bintree{
		"standalone.html": {Func: bindataResStandalonehtml, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
