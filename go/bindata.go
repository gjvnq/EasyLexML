// Code generated by go-bindata.
// sources:
// res/standalone.html
// DO NOT EDIT!

package easyLexML

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resStandaloneHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\xeb\x6f\xdb\x38\x12\xff\xec\xfe\x15\x3c\x05\xbd\x38\x77\xd6\xc3\x69\xd2\x16\xf2\xa3\xe9\xa5\xd7\xbb\x03\x52\xf4\xb0\x4d\x3f\x2c\x16\x8b\xc5\x48\x1c\x5b\x93\x50\xa4\x40\x52\x7e\x34\xc8\xff\xbe\x90\x28\xd9\x92\xe3\x64\xb1\xc0\x7e\xb2\x39\xaf\xdf\x8f\xc3\x99\xa1\x38\xfd\xdb\xa7\xaf\xd7\xb7\x3f\xff\xff\xdf\x2c\xb3\xb9\x98\xbf\x9a\xba\x9f\xc1\x34\x43\xe0\xf3\x57\x83\xc1\x34\x47\x0b\x2c\xcd\x40\x1b\xb4\x33\xef\xfb\xed\x67\xff\xbd\xb7\x57\x48\xc8\x71\xe6\xad\x08\xd7\x85\xd2\xd6\x63\xa9\x92\x16\xa5\x9d\x79\x6b\xe2\x36\x9b\x71\x5c\x51\x8a\x7e\xbd\x18\x31\x92\x64\x09\x84\x6f\x52\x10\x38\x1b\xbb\x30\x96\xac\xc0\xf9\xc3\x43\x70\x5b\xfd\x79\x7c\x9c\x86\x4e\x52\xe9\x4c\xaa\xa9\xb0\xcc\xe8\x74\xe6\x65\xd6\x16\x26\x0e\xc3\x94\xcb\x3b\x13\xa4\x42\x95\x7c\x21\x40\x63\x90\xaa\x3c\x84\x3b\xd8\x84\x82\x12\x13\xe6\x60\xb3\x6a\x71\x1e\xbc\x0b\x2e\x43\x01\x16\x8d\x0d\xee\xcc\x87\x54\xc9\x05\x2d\x67\x5f\xbe\xdc\xfc\x76\xfd\xdf\xdb\x2f\x37\x1e\x03\xb3\x95\xe9\xcc\x1b\x7b\xf3\x69\xe8\x80\x5e\xc2\x0c\xee\x0c\x47\x41\x2b\x1d\x48\xb4\xe1\x32\x0b\xd3\x05\x6a\x4e\x12\x24\xa7\xd0\xe4\x4a\xd9\xcc\x37\xa9\x56\x42\x5c\x8d\x2f\x43\x4e\xc6\xf6\xa5\x41\xa1\xc4\x76\x41\x42\x98\x20\xa7\x2a\xda\x5f\x4a\x60\x59\xe6\x26\x53\x78\x75\xe1\x90\x9b\xe5\x9f\xc5\xac\xfe\x0e\x16\xa5\x4c\x2d\x29\xc9\xbe\xca\x1b\x05\x9c\x0d\xcf\xd8\x43\x25\x1f\xa4\x4a\x1a\x25\x30\x10\x6a\x39\xf4\xbe\x59\xd0\x16\x39\x53\xb5\x91\x77\x36\xa9\x4d\x56\xa0\x99\xdb\x2e\x9b\x31\x89\x6b\xf6\xad\x4e\xc1\xb7\x5a\x34\x3c\x85\x5f\x32\x8d\x8b\x7f\xcc\xbc\x13\xef\xd7\xd3\x51\x13\x76\x60\x0a\x44\x1e\xb3\xcb\x28\x1a\x75\x04\x1f\xcd\xa7\x52\x43\x45\x24\x66\x56\x97\xd8\xe8\x10\x0c\xc9\x65\xcc\x4e\x11\x0c\xfe\x4f\x7e\x2d\xed\x75\x99\x50\x7a\xda\xa8\xcb\x82\x83\xc5\xef\x3f\xdd\xf4\x9c\x0a\x55\x18\x0b\x16\x7b\xc2\x54\x50\xe1\x04\xf5\xfa\xb1\xbb\x85\x62\xdb\xf0\xff\x8f\x4b\xe4\xf0\xf4\xc4\xaa\x94\xc1\x9e\xb4\x44\x63\x2b\xd6\x0b\x10\xa6\x1f\xa0\x97\xa6\xcf\x24\xc9\x64\x87\x79\x7a\xac\x52\xde\x4b\xbf\xdd\xba\x8a\x1f\x5c\x51\x5e\x35\x12\x2b\xb5\x18\x9e\xb6\xa7\xbf\x50\xd2\x9a\x60\xa9\xd4\x52\x20\x14\x64\xea\x92\x4f\x8d\xf9\xb0\x80\x9c\xc4\x76\x76\x43\x89\xc6\x7f\xfe\x0b\xcc\x3d\xea\x15\x09\x81\xf1\x45\x14\x8d\x2e\xa2\x88\x46\xef\xa2\xe8\xef\xa6\x4c\xaa\xde\x15\x60\x49\xfa\xb8\xb1\xa7\x8e\x45\xa2\xf8\xb6\xd9\x4e\x05\xe0\x1b\xfa\x81\x31\x1b\xbf\x2f\x36\x6e\x23\x39\xe8\x25\x49\xdf\xaa\x22\x66\xe7\x1a\xf3\xc9\xde\xd4\xe1\xc6\xcc\xab\x91\x59\x07\xd9\x1b\x31\x03\xd2\xf8\x06\x35\x2d\x3a\x1e\x2b\xd0\x04\xd2\xfa\xb2\xcc\x51\x53\x1a\x33\x0b\x49\x29\x40\x57\x02\xe3\xec\x2c\x6e\xac\x0f\x82\x96\x32\x66\x77\xa5\xb1\xb4\xd8\x76\x14\x1a\x25\x47\x5d\x9f\xbd\x2a\x2c\xe5\xf4\x03\x6f\x70\x49\x09\x09\xb2\x8d\x5d\xb6\x2d\x32\x94\x26\x66\x50\x5a\xe5\x44\x82\x24\xfa\x19\xd2\x32\xb3\x31\x3b\x8f\xa2\xd7\xbb\xfc\x0f\xae\x72\xe4\x04\x55\xb9\x22\x4a\x06\x92\xb3\x61\x4e\xd2\x8d\xaa\x98\xbd\x79\xab\x31\x6f\x2b\xbf\x93\xa9\x41\x57\xef\x30\xda\x44\x09\x5c\x54\x20\xef\xf7\x8a\x02\x38\x27\xb9\xf4\xb5\xc3\x1f\xef\x34\x35\x81\x81\x84\xd5\x89\x21\x8e\x09\xe8\x36\x7a\x4b\x75\x1c\x45\xab\x6c\xd2\x43\x3c\xbf\xe8\x04\x56\x86\x5c\x6b\x2c\x68\x83\x7c\xc2\x9c\xf8\x87\x4f\x92\xe3\x26\x66\xe3\xc6\xae\x3e\xbb\xa8\x59\x38\x7e\xed\x4a\xad\x50\x2f\x84\x5a\xc7\x4d\xc3\x1e\x50\x76\xc6\xe3\x67\xb7\xb2\x53\x24\x4a\x73\xd4\x3b\x79\xb1\x61\x46\x09\xe2\xec\x24\x8a\xa2\xe7\x36\x0b\xed\x76\x9b\xa8\x3b\x56\x4f\x4d\x4b\xd1\xda\xf6\x8e\x72\x7c\x7e\xf9\xfa\x38\xe3\x2a\x49\xec\x99\x60\x82\x02\x48\x2d\xad\x90\xcd\x19\x34\x61\x13\x48\xef\x97\x5a\x95\x92\xfb\xa9\x12\x4a\xc7\x8c\x83\xbe\x4f\x44\x89\xcf\x51\xea\x45\x69\xd9\x35\xbe\xeb\x8c\x6c\xd7\xf1\xd9\x4a\x83\xcd\x1f\x56\x5a\xb7\x29\x2f\xda\xa6\xdc\x47\x35\x58\x8f\xe9\x7a\x30\xed\xb2\x24\xc8\x58\xbf\x9e\x26\xbe\xdd\x16\x18\x33\xa9\x24\x4e\x8e\xfa\xcc\xf7\x5e\x07\xc7\x50\x9b\x66\xe3\x11\xcb\xce\x47\x2c\x7b\x33\x62\xd9\xc5\x88\x65\x97\x23\x96\xbd\x6d\x1c\xba\xad\x9a\xa2\xb4\xa8\xf7\x8e\x10\x08\x48\x50\x8c\x58\xf3\x27\x5e\x91\xa1\xea\xaa\x68\x6f\x91\x3a\x51\xfb\xf2\xa8\x63\x71\x4c\x55\x3b\xed\x5f\xa2\xdc\xc4\xec\xf3\xf6\x13\x65\xad\xca\x7b\xf4\x1b\xb7\xce\x11\x75\xc7\xd9\xbe\x13\x9f\xd9\xc9\x80\x93\x29\x04\x6c\x63\x96\x08\x95\xde\x77\x06\xd9\xba\xa9\xc0\x44\x09\x3e\xe9\xb1\x38\x18\x94\x87\xe4\x76\x98\x4f\xf8\xcd\x99\x29\x40\x36\x34\x8f\x01\x77\xa9\xfb\x51\x70\xb9\xc3\x68\x14\x2d\x44\x57\xf7\x0c\x4a\x2c\x6d\xe6\xa7\x19\x09\x3e\x1c\x9f\xf5\xa6\x7f\x55\x34\x31\x23\x0b\x82\xd2\x23\xfb\x95\x4a\xe7\x20\x5e\x0c\x2d\xc0\x58\x17\xbb\x1b\xf8\x69\xc2\xba\x78\x87\x61\x8b\xde\x69\x1d\x3b\xd2\xc0\x94\x49\x85\xd8\x59\xf5\xab\xa1\x19\x04\xc7\x53\x11\x48\x65\xb1\x76\x60\x8c\x31\x37\xbc\x7a\x63\x0b\x00\x26\x3d\xad\xaf\x81\x53\x69\x62\xb6\x4f\x6e\xa5\xdc\xf7\x4c\xb1\x61\xe3\xa8\xe9\xcf\x27\x50\x23\xd6\x03\xee\xd6\x6f\x15\xa5\xed\x86\x06\xf5\x08\x55\x78\x62\x1b\x45\x1d\xdb\x4c\xbf\x58\xde\x07\x05\xd2\xaf\x41\x18\x31\x38\xe8\xce\xf6\x56\xf0\xd7\x1a\x8a\x98\x25\x1a\xe1\xde\x5f\x2b\xcd\x27\xdd\xe6\xdd\x4d\x47\x17\x26\xce\x2a\xb7\x2a\x58\x33\x17\x1f\x8e\x37\x76\x59\xdd\xe0\xd5\x18\x3f\xde\xdd\xce\xab\x73\x03\xbe\xee\x7e\x2c\x35\x5f\x48\xd3\xb0\x79\x98\x4c\xeb\x51\xa9\xa4\x50\xc0\x67\x9e\xfb\x56\x1d\x9e\xb9\x27\x45\x65\x82\x9a\x11\x9f\x79\xee\x6f\x2d\x1e\x4c\xb3\x71\xef\x9d\x91\x8d\x6b\xeb\xd0\xd9\xb8\x0f\xb1\xa6\xaa\x2b\xd7\xea\x7d\xc3\xc1\x82\x8b\x19\x36\xaa\x27\x66\x90\x18\xab\x21\xb5\x3d\x8c\x8f\x8d\xf0\x00\x6b\xd0\x51\x3d\x3e\x3e\x09\x2b\x61\x55\x87\x6c\x6e\x1a\xaf\x75\xb9\x55\x69\x63\x2d\x61\x55\x09\x1f\x1e\x82\x6b\xa5\x8b\xd2\x54\xe2\x69\x58\xa5\x62\xfe\x6a\x1a\xba\xb7\xdb\xef\x01\x00\x00\xff\xff\xe4\xf1\x29\xa5\xd3\x0d\x00\x00")

func resStandaloneHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resStandaloneHtml,
		"res/standalone.html",
	)
}

func resStandaloneHtml() (*asset, error) {
	bytes, err := resStandaloneHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/standalone.html", size: 3539, mode: os.FileMode(420), modTime: time.Unix(1555714797, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"res/standalone.html": resStandaloneHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"res": &bintree{nil, map[string]*bintree{
		"standalone.html": &bintree{resStandaloneHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
