// Code generated by go-bindata.
// sources:
// res/standalone.html
// DO NOT EDIT!

package easyLexML

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resStandaloneHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x56\x4b\x93\xdb\x36\x0c\x3e\x2b\xbf\x02\x75\x66\x9b\xcd\xd4\xb2\xe5\xed\x6e\xd3\xa1\x65\xf7\x91\xb6\xa7\xcc\xb4\x87\xed\xa1\x47\x88\x82\x4d\x76\x29\x52\x43\x42\x76\x9c\x1d\xff\xf7\x0c\x25\xd9\x96\xbd\x8f\x9c\x4c\x01\xf8\xf0\x81\x78\x10\xce\xbf\xfb\xe3\xef\x8f\xf7\xff\xfd\xf3\x27\x28\xae\xcc\xf2\x4d\xde\xfd\x24\xb9\x22\x2c\x97\x6f\x92\x24\xaf\x88\x11\xa4\x42\x1f\x88\x17\xa3\x7f\xef\xff\x4a\x7f\x1e\x9d\x14\x16\x2b\x5a\x8c\x36\x9a\xb6\xb5\xf3\x3c\x02\xe9\x2c\x93\xe5\xc5\x68\xab\x4b\x56\x8b\x92\x36\x5a\x52\xda\x7e\x8c\x41\x5b\xcd\x1a\x4d\x1a\x24\x1a\x5a\xcc\x3a\x37\xac\xd9\xd0\xf2\xf1\x71\x72\x1f\x0f\xfb\x7d\x3e\xed\x24\x51\x17\x78\xd7\x9d\x92\x5f\x75\x15\x09\xa0\xf1\xe6\xfa\x9d\x62\xae\x83\x98\x4e\x57\xce\x72\x98\xac\x9d\x5b\x1b\xc2\x5a\x87\x89\x74\xd5\x54\x86\xf0\xcb\x0a\x2b\x6d\x76\x8b\x4f\xba\xf0\xf4\xc3\xef\x18\x1e\xc8\x6f\xb4\x31\x24\x6e\xb3\x6c\x7c\x9b\x65\x7a\xfc\x21\xcb\xbe\x0f\x4d\x11\xef\x64\x90\xb5\x4d\xe9\x33\xbf\x7b\x3f\x8f\x54\x85\x2b\x77\xf0\x18\x4f\x49\x85\x7e\xad\x6d\xca\xae\x16\x70\xe3\xa9\x6a\xf5\x49\xa4\x4d\x3b\x0a\x01\xa3\x96\x04\x06\x24\xa3\x31\x04\xb4\x21\x0d\xe4\xf5\x6a\x80\x08\xfa\x0b\x09\x98\xdd\xd6\x3c\x10\x6e\xd0\x6b\xb4\x9c\xda\xa6\x22\xaf\xa5\x00\xc6\xa2\x31\xe8\xa3\x20\x74\x76\x4c\x9f\x39\x45\xa3\xd7\x56\xc0\xff\x4d\x60\xbd\xda\x0d\x14\x9e\x6c\x49\x5e\xdb\xb5\x00\x57\xb3\xae\xf4\x17\xfa\x44\x6b\x5d\x68\xa3\xb9\xb7\x53\xbb\x5a\x91\x0d\x02\xb0\x61\xd7\x89\x8c\xb6\x94\x2a\xd2\x6b\xc5\x02\x6e\xb2\xec\xaa\x15\xef\xdb\x4c\x57\x54\x6a\x84\x20\x3d\x91\x05\xb4\x25\x5c\x57\xda\x76\x25\x14\x70\x1b\xd3\xf0\xbe\x4f\xcf\x20\x53\xc9\x50\xdf\x71\x1c\xb2\x67\x68\xc5\x02\x24\x1a\x79\x7d\x97\x5d\x41\x0a\x37\xb3\xe8\xa3\x33\xda\x1f\x79\x03\x49\xd6\xce\xbe\x65\x27\xa1\x31\xbd\x5b\xa3\x03\xa7\x6d\x17\xa4\xbc\xab\x49\x80\x75\x96\xe6\xcf\x62\x96\x27\x54\x8d\x65\xd9\x66\x24\x3b\x99\xaa\xd9\x18\xd4\xcd\x18\xd4\x8f\x63\x50\xb7\x63\x50\x77\x63\x50\x3f\xf5\x80\x61\x8a\x25\x59\x26\x7f\x02\xe2\xc4\x60\x41\x66\x0c\xfd\x41\x6c\x74\xd0\x4c\x65\x0f\x95\xce\x38\x2f\xe0\x6d\x96\x65\x83\xaa\x94\x24\x9d\xc7\x18\xdb\x0b\x21\xc3\x12\xf0\x99\x26\x9b\x1d\xb3\xf7\x42\x48\x49\xa9\x43\x6d\x70\x27\xa0\x30\x4e\x3e\x0c\x3a\x69\xdb\x57\xb3\x70\xa6\x9c\x0f\xd3\x70\xd9\xbe\x07\x71\xe1\x98\x5d\x35\xe0\x7c\x12\xdf\x12\x42\x8d\xb6\x0f\xf3\x39\xe2\x61\xe8\x69\x36\xb9\x3b\x72\xf4\x8a\x03\xc5\x50\xf7\x02\x8b\xb0\xac\x52\xa9\xb4\x29\xaf\x67\x87\xfe\xea\xc6\x26\x56\x5f\x80\x66\x34\x5a\x3e\x73\x5f\xeb\x7c\x85\xe6\x55\xd7\x06\x03\x77\xbe\x87\x8e\x9f\x26\x6c\xc8\x77\xe9\xb6\x3e\xab\xd6\x59\x6b\x1d\xba\x50\x3a\x5f\x37\x01\xfa\xcf\x89\x34\xc7\xf3\x79\xa5\xbb\x81\x98\x0d\x52\x02\x6d\x87\xfa\x57\x1b\xe2\x22\xa5\xe7\x55\x13\x8c\x7e\x4d\xdc\x3b\x40\xab\xab\xb6\xf9\xd2\xf8\x3c\x0b\x50\x7a\xad\x4c\xbc\xec\xfc\x42\x5d\x36\x87\x26\xbd\x09\x83\x17\xe0\x81\x76\x2b\x8f\x15\x85\x13\xb2\xf7\x9c\x5d\xc1\x63\x81\xf2\x61\xed\x5d\x63\xcb\xf4\xd0\xfc\xab\x15\xce\x5b\x68\xf2\xe1\xee\x5b\x16\xb3\xec\x79\x27\xed\x98\x9c\x9e\x03\x1c\x03\x5e\x8c\xda\xcb\x93\x95\x6c\x9d\x2f\xd3\xc2\x13\x3e\x08\x68\x7f\x52\x34\x5d\xf1\x12\xb7\x21\xbf\x32\x6e\x9b\x6e\x3d\xd6\x07\x6d\xb4\x9f\x0f\xe7\xb7\x30\xcd\x60\x48\x51\xa8\x08\x8b\x21\xa0\x64\xbd\xa1\x97\x22\x68\xe2\xe3\x1b\x1f\xd3\x23\x36\x9f\x1e\x96\x56\x3e\xed\x77\x68\x1e\xdf\xc9\x76\x9f\x45\x01\x79\xd0\xe5\x62\xd4\x1d\xdb\x15\x98\xe4\x6a\x76\xb6\x00\xd5\xac\xb5\x9e\x76\x36\xdd\x26\xec\x1b\x29\x42\xe3\xe2\x2d\x91\xb1\xdb\x9f\xd3\x5e\xf5\xc4\x0c\x8b\xc0\x1e\x25\x9f\x71\xfc\xd6\x0b\x2f\xb8\x92\x81\x6a\xbf\x7f\xd5\x2d\x3b\x39\x3a\x40\xee\x9d\xfc\x86\x75\x37\x13\x47\xc0\xc7\xf6\xf3\x09\x26\x9f\x76\x29\xca\xa7\xed\xdf\x8f\xaf\x01\x00\x00\xff\xff\xe1\x6f\x1c\x65\x95\x08\x00\x00")

func resStandaloneHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resStandaloneHtml,
		"res/standalone.html",
	)
}

func resStandaloneHtml() (*asset, error) {
	bytes, err := resStandaloneHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/standalone.html", size: 2197, mode: os.FileMode(420), modTime: time.Unix(1553275613, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"res/standalone.html": resStandaloneHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"res": &bintree{nil, map[string]*bintree{
		"standalone.html": &bintree{resStandaloneHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
