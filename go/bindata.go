// Code generated by go-bindata. DO NOT EDIT.
// sources:
// res/standalone.html

package easyLexML

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataResStandalonehtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x56\x4d\x73\xdb\x46\x0f\x3e\x33\xbf\x02\xaf\x32\x79\xe3\x4c\x45\x89" +
		"\x72\xec\x24\xb3\x92\xdc\x8f\xb4\x3d\x65\xa6\x3d\xb8\x87\x1e\x41\x12\x12\x31\x5e\xee\x72\x76\x41\x7d\x44\xe3\xff" +
		"\xde\x59\x92\x32\x29\x59\x76\x4e\x5c\x02\x78\xf0\x80\xf8\x58\x70\xf1\xbf\xdf\xff\xfa\x7a\xff\xef\xdf\x7f\x40\x21" +
		"\xa5\xbe\x7b\xb3\x68\x1f\xd1\xa2\x20\xcc\xef\xde\x44\xd1\xa2\x24\x41\xc8\x0a\x74\x9e\x64\x39\xfa\xe7\xfe\xcf\xf8" +
		"\xcb\xa8\x57\x18\x2c\x69\x39\xda\x30\x6d\x2b\xeb\x64\x04\x99\x35\x42\x46\x96\xa3\x2d\xe7\x52\x2c\x73\xda\x70\x46" +
		"\x71\xf3\x32\x06\x36\x2c\x8c\x3a\xf6\x19\x6a\x5a\xce\x5a\x37\xc2\xa2\xe9\xee\x70\x98\xdc\x87\xc3\xe3\xe3\x62\xda" +
		"\x4a\x82\xce\xcb\xbe\x3d\x45\xbf\x70\x19\x08\xa0\x76\xfa\xea\x7d\x21\x52\x79\x35\x9d\xae\xac\x11\x3f\x59\x5b\xbb" +
		"\xd6\x84\x15\xfb\x49\x66\xcb\x69\xe6\xfd\xcf\x2b\x2c\x59\xef\x97\xdf\x38\x75\xf4\xd3\x6f\xe8\x1f\xc8\x6d\x58\x6b" +
		"\x52\x37\x49\x32\xbe\x49\x12\x1e\x7f\x4e\x92\xff\xfb\x3a\x0d\xdf\xa4\x51\xd8\xc4\xb4\x93\xf7\x1f\xe6\x81\x2a\xb5" +
		"\xf9\x1e\x0e\xe1\x14\x05\x82\xd8\xf3\x77\x52\x30\xfb\x52\xed\x1a\x75\x54\xa2\x5b\xb3\x89\xc5\x56\x0a\xae\x1d\x95" +
		"\xf3\xde\xb4\xe5\x55\x30\x6a\x98\x61\xc0\x3c\x1a\x83\x47\xe3\x63\x4f\x8e\x57\x03\xc4\x06\x1d\xa3\x91\xd8\xd4\x25" +
		"\x39\xce\x14\x08\xa6\xb5\x46\x17\x04\xbe\xb5\x13\xda\x49\x8c\x9a\xd7\x46\x81\xa6\x95\x0c\xa4\x8e\x4c\x4e\x8e\xcd" +
		"\x5a\x81\xad\x84\x4b\xfe\x4e\xdf\x68\xcd\x29\x6b\x96\x7d\x6b\x57\xec\xab\x82\x8c\x57\x80\xb5\xd8\x56\xa4\xd9\x50" +
		"\x5c\x10\xaf\x0b\x51\x70\x9d\x24\xef\x1a\xf1\x63\x93\xe6\x92\x72\x46\xf0\x99\x23\x32\x80\x26\x87\xab\x92\x4d\x5b" +
		"\x3f\x05\x1f\x3f\x39\x2a\x3f\x74\xb9\x19\xa4\x29\x1a\xea\x5b\x8e\x63\x96\x42\xc0\x0a\x32\xd4\xd9\xd5\x6d\xf2\x0e" +
		"\xe2\xd6\x06\xa6\x70\xdd\x26\xbb\xa5\x7d\x91\x1b\x77\x3f\xe4\x1e\xd6\xe8\xe6\x58\xa3\xde\xab\xa7\x4c\xd8\x9a\xb7" +
		"\x62\x33\xa8\x75\x07\xd2\xec\x25\x6e\x9a\x2b\x96\x7d\x45\x0a\x8c\x35\x34\xbf\x88\xb9\xeb\x51\x15\xe6\x79\x93\xeb" +
		"\xa4\x37\x2d\x66\x63\x28\xae\xc7\x50\x7c\x1c\x43\x71\x33\x86\xe2\x76\x0c\xc5\xa7\x0e\x30\xac\x5c\x46\x46\xc8\xf5" +
		"\x40\x9c\x68\x4c\x49\x8f\xa1\x3b\xa8\x0d\x7b\x16\xca\x3b\x68\x66\xb5\x75\x0a\xde\x26\x49\x32\xa8\x77\x4e\x99\x75" +
		"\x18\x62\x7b\x3d\xe4\xce\xe7\x69\xdc\x71\x6a\x45\x6c\x79\x12\x7e\x07\x0b\x90\xce\x78\xd8\xdd\xb3\xa7\x72\xbe\xf0" +
		"\x25\x51\xce\xbe\xd2\xb8\x57\x90\x6a\x9b\x3d\x0c\xfa\x7a\xdb\xb5\x57\x6a\x75\x3e\x3f\x89\xe2\x6c\x6e\xce\x83\x7b" +
		"\xe2\x7c\x16\xdf\x1d\xf8\x0a\x4d\x17\xe6\x25\xe2\x61\xe8\x71\x32\xb9\x7d\xe2\xe8\x14\x47\x8a\xa1\xee\x05\x16\x65" +
		"\xa4\x88\xb3\x82\x75\x7e\x35\xfb\x70\x72\x19\x84\xa6\x51\xc0\x82\x9a\xb3\x0b\xdf\x6b\xac\x2b\x51\xbf\xea\x5a\xa3" +
		"\x97\xd6\xf7\xd0\xf1\xf3\x84\x0d\xf9\xce\xdd\x56\x27\xd5\xba\x54\xd2\x89\xaf\xd3\xc0\x38\x78\x3b\xed\x86\x76\x32" +
		"\x67\x97\x53\x31\x31\x56\xa8\x01\x00\x00\xa4\xd6\xe5\xe4\x14\xcc\xaa\x1d\x78\xab\x39\x7f\xea\xcb\x5e\x1b\x3b\xcc" +
		"\xb9\xf6\x0a\xfa\xe4\x06\x65\x3f\x33\xd5\x0e\x66\x49\x37\x9f\xed\xe8\xb8\x57\x5b\xee\xac\x68\xa7\x7d\xa1\x04\xdd" +
		"\x9a\xa4\x73\x80\x86\xcb\x66\x2a\xe2\xb0\x8e\x14\x14\xbc\x2e\x74\x48\xe7\xfc\x4c\x9d\xd7\xc7\xe9\xb9\xf6\x83\x4b" +
		"\xef\x81\xf6\x2b\x87\x25\xf9\x1e\xd9\x79\x4e\xde\xc1\x21\xc5\xec\x61\xed\x6c\x6d\xf2\xf8\x38\x95\xab\x15\xce\x1b" +
		"\x68\xf4\xf9\xf6\x47\x16\xb3\xe4\xb2\x93\x66\x7e\xfb\x7b\x0a\xc7\x80\x67\x77\xc0\xcb\x23\x1f\x6d\xad\xcb\xe3\xd4" +
		"\x11\x3e\x28\x68\x1e\x31\xea\xb6\x3d\x22\xbb\x21\xb7\xd2\x76\x1b\x6f\x1d\x56\x47\x6d\xb0\x9f\x0f\x2f\x96\x54\xd7" +
		"\x83\xdb\x03\x55\x11\x60\x21\x04\xcc\x84\x37\xf4\x52\x04\x75\xd8\x37\x61\x7f\x3c\x61\x17\xd3\xe3\x92\x5e\x4c\xbb" +
		"\x7f\x86\x45\xb8\x9e\x9b\xfd\x1d\x04\xe4\x80\xf3\xe5\xa8\x3d\x36\x2b\x3f\x5a\x14\xb3\x93\x85\x5f\xcc\x1a\xeb\x69" +
		"\x6b\xd3\x6e\xfe\x6e\x6e\x02\x34\xfc\x68\xe4\x28\xd8\xfe\x2f\x4c\x3b\xd5\x33\x33\x4c\xbd\x38\xcc\xe4\x84\xe3\xd7" +
		"\x4e\x78\xc6\x15\x0d\x54\x8f\x8f\xe7\x6e\x43\x6c\x36\x6b\xe4\x87\xc3\xe4\xab\x75\x55\xed\xc3\xdb\x62\xda\x7e\xd9" +
		"\x62\xda\xfc\x25\xfd\x17\x00\x00\xff\xff\x8e\x79\xb9\x73\x3c\x09\x00\x00")

func bindataResStandalonehtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataResStandalonehtml,
		"res/standalone.html",
	)
}

func bindataResStandalonehtml() (*asset, error) {
	bytes, err := bindataResStandalonehtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "res/standalone.html",
		size:        2364,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1554256178, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"res/standalone.html": bindataResStandalonehtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"res": {Func: nil, Children: map[string]*bintree{
		"standalone.html": {Func: bindataResStandalonehtml, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
