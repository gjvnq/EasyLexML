// Code generated by go-bindata.
// sources:
// res/standalone.html
// DO NOT EDIT!

package easyLexML

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resStandaloneHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x56\x5f\x6f\xdb\x36\x10\x7f\x76\x3f\xc5\xcd\x45\xd7\x14\xb3\x2c\x39\x4d\xda\x82\x96\xd3\x6d\xdd\x9f\x97\x16\x1b\xb0\x6e\xc0\x9e\x86\x13\x75\x36\xd9\x50\xa4\x40\x9e\x1c\xbb\x46\xbe\xfb\x40\x49\x8e\x65\xc7\x6d\x9f\x24\xf2\xee\x77\xbf\xe3\xfd\x23\xf3\xef\x7e\xf9\xe3\xdd\xc7\x7f\xff\xfc\x15\x14\x57\xe6\xe6\x49\xde\x7d\x46\xb9\x22\x2c\x6f\x9e\x8c\x46\x79\x45\x8c\x20\x15\xfa\x40\xbc\x18\xff\xfd\xf1\xb7\xe4\xcd\xf8\x20\xb0\x58\xd1\x62\xbc\xd6\x74\x57\x3b\xcf\x63\x90\xce\x32\x59\x5e\x8c\xef\x74\xc9\x6a\x51\xd2\x5a\x4b\x4a\xda\xc5\x04\xb4\xd5\xac\xd1\x24\x41\xa2\xa1\xc5\xac\x33\xc3\x9a\x0d\xdd\xec\x76\xd3\x8f\xf1\xe7\xfe\x3e\x4f\xbb\x9d\x28\x0b\xd2\xeb\x9a\x21\x78\xb9\x18\x2b\xe6\x3a\x88\x34\x95\xa5\xfd\x14\xa6\xd2\xb8\xa6\x5c\x1a\xf4\x34\x95\xae\x4a\xf1\x13\x6e\x52\xa3\x8b\x90\x56\xc8\x2a\x2e\x2e\xa7\xaf\xa7\xd7\xa9\x41\xa6\xc0\xd3\x4f\xe1\xad\x74\x76\xa9\x57\x8b\x0f\x1f\xde\xff\xf7\xd7\x3f\xbf\x8f\x01\xc3\xd6\xca\xc5\x78\x36\xbe\xc9\xd3\x8e\xa6\x63\xe4\x6d\xc7\x3d\xfa\x51\x57\xf1\x48\xd0\x78\x73\xf1\x7c\x4f\xbe\x74\x96\xc3\x74\xe5\xdc\xca\x10\xd6\x3a\xb4\xe4\x32\x84\xb7\x4b\xac\xb4\xd9\x2e\xde\xeb\xc2\xd3\x0f\x3f\x63\xb8\x25\xbf\xd6\xc6\x90\xb8\xca\xb2\xc9\x55\x96\xe9\xc9\xeb\x2c\xfb\x3e\x34\x45\x8c\xa2\x41\xd6\x36\xa1\x0d\x3f\x7f\x31\x8f\x54\x85\x2b\xb7\xb0\x8b\x7f\xa3\x48\x90\x04\xfd\x99\x04\xcc\xde\xd4\x9b\x56\x3c\xaa\xd0\xaf\xb4\x4d\xd8\xd5\x02\x2e\x3d\x55\xf3\x83\x6a\xc7\x2b\x60\xdc\x32\xc3\x80\x79\x3c\x81\x80\x36\x24\x81\xbc\x5e\x0e\x10\x6b\xf4\x1a\x2d\x27\xb6\xa9\xc8\x6b\x29\x80\xb1\x68\x0c\xfa\xb8\x11\x3a\x3d\xa6\x0d\x27\x68\xf4\xca\x0a\x30\xb4\xe4\xc1\xae\x27\x5b\x92\xd7\x76\x25\xc0\xd5\xac\x2b\xfd\x99\xde\xd3\x4a\x17\xda\x68\xde\x76\x7a\x6a\x5b\x2b\xb2\x41\x00\x36\xec\xba\x2d\xa3\x2d\x25\x8a\xf4\x4a\xb1\x80\xcb\x2c\x7b\xd6\x6e\xdf\xb7\x61\xae\xa8\xd4\x08\x41\x7a\x22\x0b\x68\x4b\xb8\xa8\xb4\xed\x2a\x46\xc0\xcb\x57\x9e\xaa\x17\x7d\x6c\x06\x61\x1a\x0d\xe5\x1d\xc7\x3e\x4a\xd1\x61\x01\x12\x8d\xbc\xb8\xce\x9e\x41\xd2\xe9\x40\x0a\x97\x5d\xb0\x3b\xda\x2f\x72\xe3\xe6\x9b\xdc\xc3\x1c\x5d\xed\x73\x74\xb0\x1a\x48\xb2\x76\xf6\x29\x3b\x09\x8d\xe9\x41\x46\x07\x4e\xda\xe2\x4a\x78\x5b\x93\x00\xeb\x2c\xcd\xcf\x62\x6e\x0e\xa8\x1a\xcb\xb2\x8d\x75\x76\x50\x55\xb3\x09\xa8\xcb\x09\xa8\x97\x13\x50\x57\x13\x50\xd7\x13\x50\xaf\x7a\xc0\x30\x73\x92\x2c\x93\x3f\x00\x71\x6a\xb0\x20\x33\x81\xfe\x47\xac\x75\xd0\x4c\x65\x0f\x95\xce\x38\x2f\xe0\x69\x96\x65\x83\x7c\x97\x24\x9d\xc7\xe8\xdb\xd7\x5d\xee\x6d\x1e\xfb\x9d\x14\x8e\xd9\x55\x47\xee\xf7\xb0\x08\xe9\x95\x87\xd5\x3d\x7b\x48\xe7\x17\x4e\x32\x2a\x75\xa8\x0d\x6e\x05\x14\xc6\xc9\xdb\x41\x5d\xdf\xf5\xe5\x55\x38\x53\xce\x8f\xbc\x38\xe9\x9b\x53\xe7\x1e\x38\x1f\xf9\x77\x03\xa1\x46\xdb\xbb\x79\x8e\x78\xe8\x7a\x92\x4d\xaf\x1f\x38\x7a\xc1\x9e\x62\x28\xfb\x02\x8b\xb0\xac\x12\xa9\xb4\x29\x2f\x66\x2f\x8e\x86\x41\x2c\x1a\x01\x9a\xd1\x68\x79\xe6\xbc\xd6\xf9\x0a\xcd\x57\x4d\x1b\x0c\xdc\xd9\x1e\x1a\x7e\x1c\xb0\x21\xdf\xa9\xd9\xfa\x28\x5b\xe7\x52\x3a\x0d\x4d\x11\x19\x07\xab\xe3\x6a\xe8\x3a\x73\x76\x3e\x14\x53\xeb\x98\x5a\x00\x00\x40\xe1\x7c\x49\x5e\xc0\xac\xde\x40\x70\x46\x97\xf0\x14\x11\xe7\x47\xd2\xc4\x63\xa9\x9b\x20\xe0\x10\xdc\x28\x3c\xf4\x4c\xbd\x81\x59\xd6\xf7\xe7\x23\xaa\x09\x1c\x11\x0f\xeb\x37\x5a\xd9\x77\x43\xcf\x7a\xc6\x55\x7c\xa4\x9b\x65\x03\x5d\xe5\xbf\x5a\xde\x27\x05\x72\x5c\x83\x82\xd1\xaf\x88\x7b\x03\x68\x75\xd5\x76\x60\x12\x2f\x5b\x01\x4a\xaf\x94\x89\xa9\x9b\x9f\x88\xcb\x66\xdf\xa9\x97\x61\x30\x60\x6f\x69\xbb\xf4\x58\x51\x38\x20\x7b\xcb\xd9\x33\xd8\x15\x28\x6f\x57\xde\x35\xb6\x4c\xf6\xe7\x58\x2e\x71\xde\x42\x47\xaf\xaf\xbf\xa5\x31\xcb\xce\x1b\x61\x8f\x36\xd4\xe8\xc9\xf2\xfc\x30\x1a\x71\x02\x78\x32\x76\xdc\x9a\xfc\xd2\xb8\xbb\xe4\xce\x63\x2d\xa0\xf0\x84\xb7\xc9\x9d\xf3\x7d\x49\xf6\xe6\x0a\xd3\x0c\x46\x0f\x0a\x15\x61\xd1\x18\x4a\xd6\x6b\x1a\x4e\xbf\xe1\xc4\x6a\xe2\x65\x15\x2f\x9f\x07\x6c\x9e\xee\x6f\xf8\x3c\xed\x9f\x38\x79\x9c\xed\xed\xe5\x1f\x37\xc8\x83\x2e\x17\xe3\xee\xb7\x7d\xa1\x8c\x72\x35\x3b\x7a\x9f\xa8\x59\xab\x9d\x76\x3a\xdd\xb3\xa1\x6f\xba\x08\x8d\xef\xa2\x12\x19\xbb\xe7\x4d\xda\x8b\x1e\xa9\x61\x11\xd8\xa3\xe4\x23\x8e\x9f\xfa\xcd\x13\xae\xd1\x40\x74\x7f\x7f\x6a\x36\xfa\xe6\x64\xbb\xbf\xdb\x4d\xdf\x39\x5f\x37\x21\xae\xf2\xb4\x3b\x59\x9e\x76\x8f\xba\xff\x03\x00\x00\xff\xff\xf8\x82\x17\x3a\xec\x09\x00\x00")

func resStandaloneHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resStandaloneHtml,
		"res/standalone.html",
	)
}

func resStandaloneHtml() (*asset, error) {
	bytes, err := resStandaloneHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/standalone.html", size: 2540, mode: os.FileMode(420), modTime: time.Unix(1554992997, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"res/standalone.html": resStandaloneHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"res": &bintree{nil, map[string]*bintree{
		"standalone.html": &bintree{resStandaloneHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
