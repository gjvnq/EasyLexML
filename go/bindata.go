// Code generated by go-bindata.
// sources:
// res/standalone.html
// DO NOT EDIT!

package easyLexML

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resStandaloneHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x55\x51\x6f\xe3\x36\x0c\x7e\xf6\xfd\x0a\xae\x87\x02\x37\x20\x6a\x9c\xdc\x75\x1b\x14\x5f\xb0\xe2\xb6\x3d\x0d\xd8\x1e\xba\x87\x3d\x32\x36\x6d\x69\x95\x25\x43\xa6\xdb\xe5\x8a\xfc\xf7\x41\x92\x9d\x38\x69\xbb\x7b\x89\x19\xf2\xfb\x28\x8a\xa4\x3f\x17\xdf\xfd\xf2\xc7\x97\xfb\xbf\xff\xfc\x15\x14\xb7\x66\xfb\xae\x48\x8f\xac\x50\x84\xd5\xf6\x5d\x96\x15\x2d\x31\x42\xa9\xd0\xf7\xc4\x9f\xaf\xfe\xba\xff\x4d\xfc\x74\x15\x03\xac\xd9\xd0\xf6\xf9\xf9\xe6\x3e\x18\x87\x43\xb1\x4c\x9e\x10\xeb\x79\x9f\xac\x6c\xe7\xaa\x3d\x3c\x07\x2b\x6b\xd1\x37\xda\x0a\x76\x9d\x84\xb5\xa7\x76\x13\xbd\xb5\xb3\x2c\x6a\x6c\xb5\xd9\x4b\xe8\xd1\xf6\xa2\x27\xaf\xeb\x59\xb0\xd7\x5f\x49\xc2\x6a\xdd\xf1\xcc\xf9\x88\x5e\xa3\x65\x61\x87\x96\xbc\x2e\x25\x30\xee\x06\x83\x3e\x38\xfa\x84\x63\xfa\x97\x05\x1a\xdd\x58\x09\xff\x0c\x3d\xeb\x7a\x3f\x0b\x78\xb2\x15\x79\x6d\x1b\x09\xae\x63\xdd\xea\xaf\xf4\x3b\x35\x7a\xa7\x8d\xe6\x11\xa7\xf6\x9d\x22\xdb\x4b\xc0\x81\x5d\x72\x19\x6d\x49\x28\xd2\x8d\x62\x09\xeb\x3c\xbf\x8e\xee\x43\xf8\xf9\xb9\xa5\x4a\x23\x7c\x68\xb5\x15\x4f\xba\x62\x25\xe1\x53\xb8\xe6\xf7\xe3\xf5\x67\x9d\xc8\xe6\xf1\x94\x78\xea\x8e\xa1\x9a\x25\x94\x68\xca\x0f\xb7\xf9\x35\x08\x58\xaf\x42\x8e\x04\x3a\x1c\x0f\xeb\xa9\x64\xed\xec\x7b\x76\x25\x0c\x66\x4c\x6b\x74\xcf\x22\xb6\x5e\xf0\xbe\x23\x09\xd6\x59\xda\xbc\xca\xd9\x9e\x58\x1d\x56\x55\x6c\x43\x7e\x82\xaa\xd5\x02\xd4\x7a\x01\xea\xe3\x02\xd4\xa7\x05\xa8\xdb\x05\xa8\x1f\x46\xc2\xbc\xaf\x25\x59\x26\x3f\x23\x7e\x04\xbc\x31\xb8\x23\x13\xc8\x93\x2d\x1f\x75\xaf\x99\xaa\x31\x41\xe9\x8c\xf3\x12\xde\xe7\x79\x3e\x1b\x48\x45\xa5\xf3\x18\x2a\xbc\x2c\xbc\x3b\x5b\xa0\xb3\x42\xbb\xd3\x71\xdd\xe5\x69\x0b\x18\x6f\x0c\xdb\x13\xea\x85\xeb\x8d\xda\xee\xee\xee\x36\xf3\xad\xf5\x69\xe4\xf9\xcd\xed\x71\x64\xdf\xa8\x7a\x6a\x77\xe9\x7c\x37\xf4\xd3\xc1\x37\xa5\x39\xda\xe7\xef\x45\x9a\xfc\xea\x74\xc0\x01\x62\x47\xfd\x2b\xaf\xcf\xea\x58\xc4\xe8\xdd\x39\x66\xd7\xce\x02\xb1\x04\xc9\xe8\x1b\xe2\x31\x01\x5a\xdd\xc6\x4a\x85\xc5\x96\x24\x28\xdd\x28\x13\xae\xb5\xb9\x08\x57\xc3\x74\xa3\x75\x3f\xdb\xef\x07\xda\xd7\x1e\x5b\xea\x4f\xcc\x31\x73\x7e\x0d\xcf\x3b\x2c\x1f\x1a\xef\x06\x5b\x89\xa9\x87\x75\x8d\x9b\x48\xcd\x7e\xbc\xfd\x16\x62\x95\xbf\x9e\x24\xf6\xf4\xb4\xf7\xb8\x00\xbc\x98\xd8\xdb\x63\xc8\x9e\x9c\xaf\xc4\xce\x13\x3e\x48\x88\x0f\x81\xc6\xa4\x90\x7b\x24\x5f\x1b\xf7\x24\x9e\x3c\x76\x53\x34\xe0\x37\xf3\x35\xd8\x99\xe1\x6c\x0f\x51\xaa\x40\x8c\xcb\x26\xb1\x64\xfd\x48\x69\xcf\x27\x7f\xb4\x53\xe0\xad\xf2\x86\xa0\x3b\x41\x47\x8e\x89\x8b\xe5\xa4\x97\xc5\x72\xd4\xdd\x22\xa8\x45\x94\xd2\xe0\x20\x0f\xba\xfa\x7c\x95\xcc\xa8\xbe\x59\xa1\x56\x67\xda\xab\x56\x11\xbd\x4c\x98\x24\xc2\xe3\x96\x05\x6a\x50\xf1\x0a\x19\x93\x74\x2f\xc7\xd0\x0b\x18\xbb\x32\xa5\x0f\xa9\x5d\x79\x38\xfc\x2f\x3a\x6d\xf6\x91\xf0\x25\xfe\x7d\xc1\x29\x96\xe9\x2e\xc5\x32\x7e\x5b\xfe\x0b\x00\x00\xff\xff\x08\x2f\x01\xe0\x72\x06\x00\x00")

func resStandaloneHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resStandaloneHtml,
		"res/standalone.html",
	)
}

func resStandaloneHtml() (*asset, error) {
	bytes, err := resStandaloneHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/standalone.html", size: 1650, mode: os.FileMode(420), modTime: time.Unix(1552402453, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"res/standalone.html": resStandaloneHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"res": &bintree{nil, map[string]*bintree{
		"standalone.html": &bintree{resStandaloneHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
