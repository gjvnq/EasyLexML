// Code generated by go-bindata. DO NOT EDIT.
// sources:
// res/standalone.html

package easyLexML

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataResStandalonehtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x56\x4b\x73\xdb\x36\x10\x3e\x2b\xbf\x62\x2b\x8f\x1b\x7b\x4a\x4a\x94" +
		"\x63\x27\x19\x48\x72\x1f\x69\x7b\xca\x4c\x7b\x70\x0f\x3d\x2e\xc9\x95\x80\x31\x08\x70\x80\xa5\x1e\xd1\xf8\xbf\x67" +
		"\x40\x52\x16\x24\xcb\xce\x89\x20\x76\xbf\xfd\x16\xfb\x02\x66\x3f\xfd\xf9\xcf\x97\x87\xff\xff\xfd\x0b\x24\x57\xfa" +
		"\xfe\xdd\xac\xfb\x0c\x66\x92\xb0\xbc\x7f\x37\x18\xcc\x2a\x62\x84\x42\xa2\xf3\xc4\xf3\xe1\x7f\x0f\x7f\xa7\x9f\x87" +
		"\x07\x81\xc1\x8a\xe6\xc3\x95\xa2\x75\x6d\x1d\x0f\xa1\xb0\x86\xc9\xf0\x7c\xb8\x56\x25\xcb\x79\x49\x2b\x55\x50\xda" +
		"\xfe\x24\xa0\x8c\x62\x85\x3a\xf5\x05\x6a\x9a\x4f\x3a\x33\xac\x58\xd3\xfd\x6e\x37\x7a\x08\x8b\xa7\xa7\xd9\xb8\xdb" +
		"\x09\x32\xcf\xdb\x6e\x35\xf8\x4d\x55\x81\x00\x1a\xa7\xaf\xde\x4b\xe6\xda\x8b\xf1\x78\x61\x0d\xfb\xd1\xd2\xda\xa5" +
		"\x26\xac\x95\x1f\x15\xb6\x1a\x17\xde\xff\xba\xc0\x4a\xe9\xed\xfc\xab\xca\x1d\xfd\xf2\x07\xfa\x47\x72\x2b\xa5\x35" +
		"\x89\xdb\x2c\x4b\x6e\xb3\x4c\x25\x9f\xb2\xec\x67\xdf\xe4\xe1\x4c\x1a\x59\x99\x94\x36\xfc\xfe\x7a\x1a\xa8\x72\x5b" +
		"\x6e\x61\x17\x56\x83\x40\x90\x7a\xf5\x8d\x04\x4c\x3e\xd7\x9b\x56\x3c\xa8\xd0\x2d\x95\x49\xd9\xd6\x02\x6e\x1c\x55" +
		"\xd3\x83\x6a\xc7\x2b\x60\xd8\x32\x43\xc4\x3c\x4c\xc0\xa3\xf1\xa9\x27\xa7\x16\x11\x62\x85\x4e\xa1\xe1\xd4\x34\x15" +
		"\x39\x55\x08\x60\xcc\x1b\x8d\x2e\x6c\xf8\x4e\x8f\x69\xc3\x29\x6a\xb5\x34\x02\x34\x2d\x38\xda\x75\x64\x4a\x72\xca" +
		"\x2c\x05\xd8\x9a\x55\xa5\xbe\xd1\x57\x5a\xaa\x5c\x69\xc5\xdb\x4e\x4f\x6e\x6b\x49\xc6\x0b\xc0\x86\x6d\xb7\xa5\x95" +
		"\xa1\x54\x92\x5a\x4a\x16\x70\x93\x65\x97\xed\xf6\x53\x1b\xe6\x8a\x4a\x85\xe0\x0b\x47\x64\x00\x4d\x09\x57\x95\x32" +
		"\x5d\xfe\x04\x7c\xf8\xe8\xa8\xba\xee\x63\x13\x85\x69\x10\xcb\x3b\x8e\x7d\x94\x82\xc3\x02\x0a\xd4\xc5\xd5\x5d\x76" +
		"\x09\x69\xa7\x03\x63\xb8\xe9\x82\xdd\xd1\xbe\xca\x8d\x9b\x1f\x72\xc7\x39\xba\xdd\xe7\xe8\x60\xd5\x53\xc1\xca\x9a" +
		"\x0b\xb6\x05\x34\xba\x07\x69\xe5\x39\x6d\x8b\x2b\xe5\x6d\x4d\x02\x8c\x35\x34\x3d\x8b\xb9\x3f\xa0\x6a\x2c\xcb\x36" +
		"\xd6\xd9\x41\x55\x4e\x12\x90\x37\x09\xc8\x0f\x09\xc8\xdb\x04\xe4\x5d\x02\xf2\x63\x0f\x88\x33\x57\x90\x61\x72\x07" +
		"\x20\x8e\x34\xe6\xa4\x13\xe8\x17\x62\xa5\xbc\x62\x2a\x7b\x68\x61\xb5\x75\x02\x2e\xb2\x2c\x8b\xf2\x5d\x52\x61\x1d" +
		"\x06\xdf\xde\x76\xb9\xb7\x79\xec\x77\x9a\x5b\x66\x5b\x1d\xb9\xdf\xc3\x02\xa4\x57\x8e\xab\x7b\xf2\x9c\xce\x57\x4e" +
		"\x32\x28\x95\xaf\x35\x6e\x05\xe4\xda\x16\x8f\x51\x5d\xaf\xfb\xf2\xca\xad\x2e\xa7\x47\x5e\x9c\xf4\xcd\xa9\x73\xcf" +
		"\x9c\x2f\xfc\xbb\x07\x5f\xa3\xe9\xdd\x3c\x47\x1c\xbb\x9e\x66\xa3\xbb\x67\x8e\x5e\xb0\xa7\x88\x65\xaf\xb0\x08\xc3" +
		"\x32\x2d\xa4\xd2\xe5\xd5\xe4\xfa\x68\x18\x84\xa2\x11\xa0\x18\xb5\x2a\xce\x9c\xd7\x58\x57\xa1\x7e\xd3\xb4\x46\xcf" +
		"\x9d\xed\xd8\xf0\xcb\x80\xc5\x7c\xa7\x66\xeb\xa3\x6c\x9d\x4b\xe9\xc8\x37\x79\x60\x8c\xfe\x8e\xab\xa1\xeb\xcc\xc9" +
		"\xf9\x50\x8c\x8c\x65\x6a\x01\x00\x00\xb9\x75\x25\x39\x01\x93\x7a\x03\xde\x6a\x55\xc2\x05\x22\x4e\x8f\xa4\xa9\xc3" +
		"\x52\x35\x5e\xc0\x21\xb8\x41\x78\xe8\x99\x7a\x03\x93\xac\xef\xcf\x17\x54\x09\x1c\x11\xc7\xf5\x1b\xac\xec\xbb\xa1" +
		"\x67\x3d\xe3\x2a\xbe\xd0\xcd\xb2\x48\x57\xba\x37\xcb\xfb\xa4\x40\x8e\x6b\x50\x30\xba\x25\x71\x6f\x00\x8d\xaa\xda" +
		"\x0e\x4c\xc3\xd5\x27\x40\xaa\xa5\xd4\x21\x75\xd3\x13\x71\xd9\xec\x3b\xf5\xc6\x47\x03\xf6\x91\xb6\x0b\x87\x15\xf9" +
		"\x03\xb2\xb7\x9c\x5d\xc2\x2e\xc7\xe2\x71\xe9\x6c\x63\xca\x74\x7f\x8e\xc5\x02\xa7\x2d\x74\xf0\xe9\xee\x47\x1a\x93" +
		"\xec\xbc\x11\x76\x68\x7c\x8d\x8e\x0c\x4f\x0f\xa3\x11\x13\xc0\x93\xb1\x63\x57\xe4\x16\xda\xae\xd3\xb5\xc3\x5a\x40" +
		"\xee\x08\x1f\xd3\xb5\x75\x7d\x49\xf6\xe6\x72\xdd\x44\xa3\x07\x85\x0c\xb0\x60\x0c\x0b\x56\x2b\x8a\xa7\x5f\x3c\xb1" +
		"\x9a\x70\x59\x85\xcb\xe7\x19\x3b\x1b\xef\x6f\xf8\xd9\xb8\x7f\x70\xcc\xc2\x6c\x6f\x2f\xff\xb0\x41\x0e\x54\x39\x1f" +
		"\x76\xcb\xf6\xbd\x30\x98\xc9\xc9\xd1\x6b\x41\x4e\x5a\xed\x71\xa7\xd3\x3d\x1b\xfa\xa6\x0b\xd0\xf0\x4a\x29\x91\xb1" +
		"\x7b\x6c\x8c\x7b\xd1\x0b\x35\xcc\x3d\x3b\x2c\xf8\x88\xe3\xf7\x7e\xf3\x84\x6b\x10\x89\x9e\x9e\x4e\xcd\x06\xdf\x6c" +
		"\xd1\xee\xef\x76\xa3\x2f\xd6\xd5\x8d\x0f\x7f\xb3\x71\x77\xb2\xd9\xb8\x7d\x62\x7d\x0f\x00\x00\xff\xff\xbf\x3b\x87" +
		"\x5b\x79\x09\x00\x00")

func bindataResStandalonehtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataResStandalonehtml,
		"res/standalone.html",
	)
}

func bindataResStandalonehtml() (*asset, error) {
	bytes, err := bindataResStandalonehtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "res/standalone.html",
		size:        2425,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1554344263, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"res/standalone.html": bindataResStandalonehtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"res": {Func: nil, Children: map[string]*bintree{
		"standalone.html": {Func: bindataResStandalonehtml, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
