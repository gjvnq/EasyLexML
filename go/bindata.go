// Code generated by go-bindata.
// sources:
// res/standalone.html
// DO NOT EDIT!

package easyLexML

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resStandaloneHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x56\x5f\x6f\xdb\x38\x12\x7f\x76\x3f\xc5\x9c\x8b\x5c\x53\xd4\xb2\x24\x37\x69\x0b\xd9\x4e\xef\xae\xb7\xbb\x2f\x2d\x76\x81\xcd\x2e\xb0\x4f\x8b\x11\x35\xb6\xd8\x50\xa4\x40\x52\x8e\xdd\x20\xdf\x7d\x41\x91\x8a\x24\xdb\x69\x9f\x6c\xcd\x9f\xdf\x6f\x38\x9c\x19\xce\xea\x5f\xff\xff\xf5\xd3\xed\x5f\xbf\xfd\x04\xa5\xad\xc4\xcd\x8b\x95\xff\x99\xac\x4a\xc2\xe2\xe6\xc5\x64\xb2\xaa\xc8\x22\xb0\x12\xb5\x21\xbb\x9e\xfe\x71\xfb\x73\xf4\x61\xda\x2b\x24\x56\xb4\x9e\xee\x38\xdd\xd7\x4a\xdb\x29\x30\x25\x2d\x49\xbb\x9e\xde\xf3\xc2\x96\xeb\x82\x76\x9c\x51\xd4\x7e\xcc\x80\x4b\x6e\x39\x8a\xc8\x30\x14\xb4\x4e\x3d\x8c\xe5\x56\xd0\xcd\xc3\xc3\xfc\xd6\xfd\x79\x7c\x5c\xc5\x5e\xe2\x74\x86\x69\x5e\x5b\x30\x9a\xad\xa7\xa5\xb5\xb5\xc9\xe2\x98\x15\xf2\xab\x99\x33\xa1\x9a\x62\x23\x50\xd3\x9c\xa9\x2a\xc6\xaf\xb8\x8f\x05\xcf\x4d\x5c\xa1\x2d\xdd\xc7\x62\xfe\x7e\x7e\x1d\x0b\xb4\x64\xec\xfc\xab\xf9\xc8\x94\xdc\xf0\xed\xfa\xcb\x97\xcf\x7f\xff\xfe\xe7\x2f\x53\x40\x73\x90\x6c\x3d\x4d\xa7\x37\xab\xd8\xd3\x78\x46\x7b\xf0\xdc\x93\xff\xf0\xca\x1d\x09\x1a\x2d\x2e\x5f\x75\xe4\x1b\x25\xad\x99\x6f\x95\xda\x0a\xc2\x9a\x9b\x96\x9c\x19\xf3\x71\x83\x15\x17\x87\xf5\x67\x9e\x6b\x7a\xf3\x3f\x34\x77\xa4\x77\x5c\x08\xca\xae\x92\x64\x76\x95\x24\x7c\xf6\x3e\x49\xfe\x6d\x9a\xdc\x65\x51\xa0\xe5\x32\xa2\xbd\x7d\xf5\x7a\xe9\xa8\x72\x55\x1c\xe0\xc1\xfd\x9b\x38\x82\xc8\xf0\x6f\x94\x41\xfa\xa1\xde\xb7\xea\x49\x85\x7a\xcb\x65\x64\x55\x9d\xc1\x42\x53\xb5\xec\x4d\x3d\x6f\x06\xd3\x96\x19\x06\xcc\xd3\x19\x18\x94\x26\x32\xa4\xf9\x66\xe0\xb1\x43\xcd\x51\xda\x48\x36\x15\x69\xce\x32\xb0\x98\x37\x02\xb5\x13\x18\x6f\x67\x69\x6f\x23\x14\x7c\x2b\x33\x10\xb4\xb1\x03\xa9\x26\x59\x90\xe6\x72\x9b\x81\xaa\x2d\xaf\xf8\x37\xfa\x4c\x5b\x9e\x73\xc1\xed\xc1\xdb\x95\x87\xba\x24\x69\x32\xc0\xc6\x2a\x2f\x12\x5c\x52\x54\x12\xdf\x96\x36\x83\x45\x92\x5c\xb4\xe2\xc7\x36\xcd\x15\x15\x1c\xc1\x30\x4d\x24\x01\x65\x01\x97\x15\x97\xbe\x62\x32\x78\xfb\x4e\x53\xf5\x3a\xe4\x66\x90\xa6\xc9\x50\xef\x39\xba\x2c\xb9\x80\x33\x60\x28\xd8\xe5\xe2\x5a\x53\x05\x6f\xe0\x32\x4d\x92\x0b\x88\xc0\x7f\x47\x01\x35\x5e\xf8\xec\xfb\x38\x26\x12\x77\x2f\x0d\x2f\x28\x47\xdd\x91\x74\x11\xa7\x49\xb2\x2b\x97\x23\xe2\x16\x2a\x88\x6a\x65\xb8\xe5\x4a\x66\xb0\xe1\x7b\x2a\x96\xe0\xc5\xdf\x22\x2e\x0b\xda\x67\x90\x06\xbb\xf6\xfe\x92\xf0\xe1\xc3\xec\xbe\xd4\x8e\xf4\x46\xa8\xfb\xcc\x25\x42\x09\xd1\x21\x63\x51\x70\xb9\x0d\x67\x4a\x9f\x18\x73\xa5\x0b\xd2\x91\x0e\xe1\xd5\x7b\x30\x4a\xf0\x02\x5e\x26\x49\xf2\xdc\x99\xb0\x3b\x55\x00\x7d\x22\x3f\x35\x6d\x44\x67\x3b\xba\xb8\x74\x71\x7d\x71\x3e\x30\x97\x0b\xe8\xc1\x9e\xbd\x58\xdc\xff\xf0\x62\x87\x0d\x70\xd5\x35\x40\x8f\x6a\x88\xb9\x54\xbf\xb4\x8a\xf5\x61\x0a\x6e\x6c\xd4\x76\x6e\x64\x0f\x35\x65\x20\x95\xa4\xe5\x59\x9f\x9b\xde\xeb\x28\x0f\xad\x69\x99\xce\xa0\x5c\xcc\xa0\x7c\x3b\x83\xf2\x6a\x06\xe5\xf5\x0c\xca\x77\xc1\x61\xd8\x16\x8c\xa4\x25\xdd\x3b\xe2\x5c\x60\x4e\x62\x06\xe1\x4f\xb6\xe3\x86\x5b\x2a\x82\x2b\x53\x42\xe9\x6c\x70\x3f\x2d\x56\x41\x4c\x69\xf4\xa5\xf3\xbd\x90\x03\xe6\x38\xee\x28\x57\xd6\xaa\x6a\x14\x7e\x70\x73\x2e\xc1\x78\x38\x3a\xd2\xa7\x92\x7d\xe6\x24\x93\x82\x9b\x5a\xe0\x21\x83\x5c\x28\x76\x37\x18\x1a\xf7\xa1\x04\x72\x25\x8a\xe5\x28\x8a\xa3\xa1\x74\x1c\xdc\x13\xe7\x49\x7c\x37\x60\x6a\x94\x21\xcc\x73\xc4\xc3\xd0\xa3\x64\xde\x37\x5c\x50\x74\x14\x43\xdd\x33\x2c\x99\xb4\x65\xc4\x4a\x2e\x8a\xcb\xf4\xf5\x68\xd2\xba\xa2\xc9\x80\x5b\x14\x9c\x9d\x39\xaf\x54\xba\x42\xf1\x5d\x68\x81\xc6\x7a\xec\x21\xf0\x69\xc2\x86\x7c\xc7\xb0\xf5\xe8\xb6\xce\x5d\xe9\xdc\x34\xb9\x63\x1c\x7c\x8d\xab\x21\x74\xe2\xf9\x54\xcc\xa5\xb2\xd4\x3a\x00\x00\xf8\xe9\x31\x9a\x1b\x88\xb8\x1c\x69\x23\x8d\x05\x6f\x4c\x06\x7d\x72\x9d\xb2\xef\x99\x7a\x0f\x69\x12\xfa\xf3\x84\x6a\x06\x23\xe2\x61\xfd\x3a\x94\xae\x1b\x02\xeb\x99\x50\xf1\xc4\x36\x49\x06\xb6\xa5\xfe\x6e\x79\x1f\x15\xc8\xb8\x06\x33\x8b\x7a\x4b\x36\x00\xa0\xe4\x55\xdb\x81\x91\xdb\x64\x32\x28\xf9\xb6\x14\xee\xea\x96\x47\xea\xa2\xe9\x3a\x75\x61\x06\xaf\xd7\x1d\x1d\x36\x1a\x2b\x32\xbd\x67\x40\x4e\x2e\xe0\x21\x47\x76\xb7\xd5\xaa\x91\x45\xd4\x9d\x63\xb3\xc1\xa5\x9f\xb8\xef\xaf\x7f\x64\xd1\x3e\x5b\x67\x4c\xac\x46\x69\x6a\xd4\x24\xed\xb2\x1f\x8d\x38\x03\x3c\x1a\x3b\xdd\xb3\x12\xdd\x6b\xac\x33\xc8\x35\xe1\x5d\x74\xaf\x74\x28\xc9\x00\x97\x8b\x66\x30\x7a\x30\x2b\x9d\x9b\x03\x43\x66\xf9\x8e\x86\xd3\x6f\x38\xb1\x1a\xb7\x09\xb8\x07\xe2\xfc\xd8\xf2\x5e\x83\x27\xb4\x7f\xf4\x57\x71\xb7\x66\xad\xe2\xb0\x67\xae\xdc\x1b\xd0\x6e\x60\x4e\x40\x1a\x78\xb1\x9e\xfa\xbf\xed\x9a\x38\x59\x95\xe9\x68\x49\x2c\xd3\xd6\x3a\xf6\x36\x7e\x77\x0b\xcd\xe9\x5c\xdd\x72\x5a\xa0\x45\xbf\x63\xc6\x41\x75\x62\x86\xb9\xb1\x1a\x99\x1d\x71\xfc\x37\x08\x8f\xb8\x26\x03\xd5\xe3\xe3\x09\xac\xc4\x5d\x0b\x19\x1e\xd1\x69\xe7\x72\xab\x58\xb0\x96\xb8\x73\xc2\x87\x87\xf9\x27\xa5\xeb\xc6\x38\xf1\x2a\xf6\x07\x5f\xc5\x7e\xf1\xfe\x27\x00\x00\xff\xff\x9f\xb7\x44\x46\x90\x0b\x00\x00")

func resStandaloneHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resStandaloneHtml,
		"res/standalone.html",
	)
}

func resStandaloneHtml() (*asset, error) {
	bytes, err := resStandaloneHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/standalone.html", size: 2960, mode: os.FileMode(420), modTime: time.Unix(1555712425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"res/standalone.html": resStandaloneHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"res": &bintree{nil, map[string]*bintree{
		"standalone.html": &bintree{resStandaloneHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
